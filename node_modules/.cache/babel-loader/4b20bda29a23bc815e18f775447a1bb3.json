{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchableMultiSelectDumb = undefined;\n\nvar _find2 = require('lodash/find');\n\nvar _find3 = _interopRequireDefault(_find2);\n\nvar _first2 = require('lodash/first');\n\nvar _first3 = _interopRequireDefault(_first2);\n\nvar _filter2 = require('lodash/filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _some2 = require('lodash/some');\n\nvar _some3 = _interopRequireDefault(_some2);\n\nvar _every2 = require('lodash/every');\n\nvar _every3 = _interopRequireDefault(_every2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _escapeRegExp2 = require('lodash/escapeRegExp');\n\nvar _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);\n\nvar _findIndex2 = require('lodash/findIndex');\n\nvar _findIndex3 = _interopRequireDefault(_findIndex2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _includes2 = require('lodash/includes');\n\nvar _includes3 = _interopRequireDefault(_includes2);\n\nvar _partition4 = require('lodash/partition');\n\nvar _partition5 = _interopRequireDefault(_partition4);\n\nvar _reject2 = require('lodash/reject');\n\nvar _reject3 = _interopRequireDefault(_reject2);\n\nvar _noop2 = require('lodash/noop');\n\nvar _noop3 = _interopRequireDefault(_noop2);\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _stateManagement = require('../../util/state-management');\n\nvar _textManipulation = require('../../util/text-manipulation');\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _SearchField = require('../SearchField/SearchField');\n\nvar _DropMenu = require('../DropMenu/DropMenu');\n\nvar _LoadingIcon = require('../Icon/LoadingIcon/LoadingIcon');\n\nvar _LoadingIcon2 = _interopRequireDefault(_LoadingIcon);\n\nvar _CheckboxLabeled = require('../CheckboxLabeled/CheckboxLabeled');\n\nvar _CheckboxLabeled2 = _interopRequireDefault(_CheckboxLabeled);\n\nvar _Selection = require('../Selection/Selection');\n\nvar _Selection2 = _interopRequireDefault(_Selection);\n\nvar _SearchableMultiSelect = require('./SearchableMultiSelect.reducers');\n\nvar reducers = _interopRequireWildcard(_SearchableMultiSelect);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar any = _propTypes2.default.any,\n    arrayOf = _propTypes2.default.arrayOf,\n    bool = _propTypes2.default.bool,\n    func = _propTypes2.default.func,\n    number = _propTypes2.default.number,\n    oneOfType = _propTypes2.default.oneOfType,\n    shape = _propTypes2.default.shape,\n    string = _propTypes2.default.string,\n    oneOf = _propTypes2.default.oneOf,\n    node = _propTypes2.default.node;\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-SearchableMultiSelect');\n\nvar SearchableMultiSelect = (0, _componentTypes.createClass)({\n  displayName: 'SearchableMultiSelect',\n  statics: {},\n  reducers: reducers,\n  components: {\n    Option: (0, _componentTypes.createClass)({\n      displayName: 'SearchableMultiSelect.Option',\n      statics: {},\n      propName: 'Option',\n      propTypes: _extends({\n        filterText: string\n      }, _DropMenu.DropMenuDumb.Option.propTypes),\n      components: {\n        Selected: (0, _componentTypes.createClass)({\n          displayName: 'SearchableMultiSelect.Option.Selected',\n          statics: {},\n          propName: 'Selected'\n        }),\n        Selection: (0, _componentTypes.createClass)({\n          displayName: 'SearchableMultiSelect.Option.Selection',\n          propName: 'Selection',\n          propTypes: _Selection2.default.propTypes\n        })\n      }\n    }),\n    SearchField: (0, _componentTypes.createClass)({\n      displayName: 'SearchableMultiSelect.SearchField',\n      statics: {},\n      propName: 'SearchField',\n      propTypes: _SearchField.SearchFieldDumb.propTypes\n    }),\n    OptionGroup: (0, _componentTypes.createClass)({\n      displayName: 'SearchableMultiSelect.OptionGroup',\n      statics: {},\n      propName: 'OptionGroup',\n      propTypes: _DropMenu.DropMenuDumb.OptionGroup.propTypes,\n      components: {\n        Selected: (0, _componentTypes.createClass)({\n          displayName: 'SearchableMultiSelect.OptionGroup.Selected',\n          statics: {},\n          propName: 'Selected'\n        })\n      }\n    }),\n    SelectionLabel: (0, _componentTypes.createClass)({\n      displayName: 'SearchableMultiSelect.SelectionLabel',\n      statics: {},\n      propName: 'SelectionLabel'\n    })\n  },\n  propTypes: {\n    children: node,\n    className: string,\n    isDisabled: bool,\n    isLoading: bool,\n    maxMenuHeight: oneOfType([number, string]),\n    onSearch: func,\n    onSelect: func,\n    onRemoveAll: func,\n    optionFilter: func,\n    searchText: string,\n    selectedIndices: arrayOf(number),\n    DropMenu: shape(_DropMenu.DropMenuDumb.propTypes),\n    Option: any,\n    responsiveMode: oneOf(['small', 'medium', 'large']),\n    hasRemoveAll: bool,\n    hasSelections: bool,\n    hasSelectAll: bool\n  },\n  getInitialState: function getInitialState() {\n    return {\n      optionGroups: [],\n      flattenedOptionsData: [],\n      ungroupedOptionData: [],\n      optionGroupDataLookup: {}\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      isDisabled: false,\n      isLoading: false,\n      onRemoveAll: _noop3.default,\n      optionFilter: _textManipulation.propsSearch,\n      searchText: '',\n      selectedIndices: [],\n      DropMenu: _DropMenu.DropMenuDumb.getDefaultProps(),\n      responsiveMode: 'large',\n      hasRemoveAll: true,\n      hasSelections: true,\n      hasSelectAll: false\n    };\n  },\n  handleDropMenuSelect: function handleDropMenuSelect(optionIndex, _ref) {\n    var event = _ref.event,\n        props = _ref.props;\n    var onSelect = this.props.onSelect;\n    event.preventDefault();\n\n    if (optionIndex === 0) {\n      return this.handleSelectAll(event);\n    } // this index is decremented to account for the \"Select All\" Option\n\n\n    return onSelect(optionIndex - 1, {\n      event: event,\n      props: props\n    });\n  },\n  handleSelectAll: function handleSelectAll(event) {\n    // This is needed otherwise clicking the checkbox will double fire this\n    // event _and_ the `handleDropMenuSelect` handler\n    var _props = this.props,\n        selectedIndices = _props.selectedIndices,\n        onSelect = _props.onSelect,\n        flattenedOptionsData = this.state.flattenedOptionsData;\n    event.preventDefault();\n    var visibleOptions = (0, _reject3.default)(flattenedOptionsData, 'optionProps.isHidden');\n\n    var _partition2 = (0, _partition5.default)(visibleOptions, function (_ref2) {\n      var optionIndex = _ref2.optionIndex;\n      return (0, _includes3.default)(selectedIndices, optionIndex);\n    }),\n        _partition3 = _slicedToArray(_partition2, 2),\n        selected = _partition3[0],\n        unselected = _partition3[1];\n\n    var indices = (0, _isEmpty3.default)(unselected) ? (0, _map3.default)(selected, 'optionIndex') : (0, _map3.default)(unselected, 'optionIndex');\n    return onSelect(indices);\n  },\n  handleSelectionRemove: function handleSelectionRemove(_ref3) {\n    var event = _ref3.event,\n        props = _ref3.props,\n        optionIndex = _ref3.props.callbackId; // We don't want to send the consumer the selection's props so we have to\n    // lookup the option they clicked and send its props along\n\n    var selectedOptionProps = (0, _get3.default)((0, _componentTypes.findTypes)(this.props, SearchableMultiSelect.Option), '[' + optionIndex + '].props');\n    return this.props.onSelect(optionIndex, {\n      event: event,\n      props: selectedOptionProps\n    });\n  },\n  handleRemoveAll: function handleRemoveAll(_ref4) {\n    var event = _ref4.event;\n    this.props.onRemoveAll({\n      event: event,\n      props: this.props\n    });\n  },\n  handleSearch: function handleSearch(searchText, _ref5) {\n    var event = _ref5.event;\n    var props = this.props,\n        _props2 = this.props,\n        onSearch = _props2.onSearch,\n        optionFilter = _props2.optionFilter,\n        onExpand = _props2.DropMenu.onExpand;\n    var options = (0, _map3.default)((0, _componentTypes.findTypes)(props, SearchableMultiSelect.Option), 'props');\n    var firstVisibleIndex = (0, _findIndex3.default)(options, function (option) {\n      return optionFilter(searchText, option);\n    });\n    var firstVisibleProps = options[firstVisibleIndex]; // Just an extra call to make sure the search results show up when a user\n    // is typing\n\n    onExpand();\n    return onSearch(searchText, firstVisibleIndex, {\n      event: event,\n      props: firstVisibleProps\n    });\n  },\n  componentWillMount: function componentWillMount() {\n    var _this = this; // preprocess the options data before rendering\n\n\n    this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(this.props, SearchableMultiSelect, function (props) {\n      return !_this.props.optionFilter(_this.props.searchText, props);\n    }));\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var _this2 = this; // only preprocess options data when it changes (via new props) - better performance than doing this each render\n\n\n    this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(nextProps, SearchableMultiSelect, function (props) {\n      return !_this2.props.optionFilter(nextProps.searchText, props);\n    }));\n  },\n  renderUnderlinedChildren: function renderUnderlinedChildren(childText, searchText) {\n    var _partitionText = (0, _textManipulation.partitionText)(childText, new RegExp((0, _escapeRegExp3.default)(searchText), 'i'), searchText.length),\n        _partitionText2 = _slicedToArray(_partitionText, 3),\n        pre = _partitionText2[0],\n        match = _partitionText2[1],\n        post = _partitionText2[2];\n\n    return [pre && _react2.default.createElement('span', {\n      key: 'pre',\n      className: cx('&-Option-underline-pre')\n    }, pre), match && _react2.default.createElement('span', {\n      key: 'match',\n      className: cx('&-Option-underline-match')\n    }, match), post && _react2.default.createElement('span', {\n      key: 'post',\n      className: cx('&-Option-underline-post')\n    }, post)];\n  },\n  renderOption: function renderOption(_ref6) {\n    var optionProps = _ref6.optionProps,\n        optionIndex = _ref6.optionIndex;\n    var _props3 = this.props,\n        searchText = _props3.searchText,\n        selectedIndices = _props3.selectedIndices,\n        isLoading = _props3.isLoading,\n        optionFilter = _props3.optionFilter;\n    return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, _extends({\n      key: 'SearchableMultiSelectOption' + optionIndex\n    }, (0, _omit3.default)(optionProps, ['children', 'Selected', 'filterText']), {\n      isHidden: !optionFilter(searchText, optionProps),\n      isDisabled: optionProps.isDisabled || isLoading\n    }), _react2.default.createElement(_CheckboxLabeled2.default, {\n      className: cx('&-CheckboxLabeled'),\n      callbackId: optionIndex,\n      isSelected: (0, _includes3.default)(selectedIndices, optionIndex)\n    }, _react2.default.createElement(_CheckboxLabeled2.default.Label, null, (0, _isString3.default)(optionProps.children) ? this.renderUnderlinedChildren(optionProps.children, searchText) : (0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children, {\n      searchText: searchText\n    }) : optionProps.children)));\n  },\n  renderOptions: function renderOptions() {\n    var _this3 = this;\n\n    var _props4 = this.props,\n        searchText = _props4.searchText,\n        isLoading = _props4.isLoading,\n        hasSelectAll = _props4.hasSelectAll,\n        selectedIndices = _props4.selectedIndices;\n    var _state = this.state,\n        optionGroups = _state.optionGroups,\n        optionGroupDataLookup = _state.optionGroupDataLookup,\n        ungroupedOptionData = _state.ungroupedOptionData,\n        flattenedOptionsData = _state.flattenedOptionsData;\n    var visibleOptions = (0, _reject3.default)(flattenedOptionsData, 'optionProps.isHidden');\n    var isAllOptionsHidden = (0, _isEmpty3.default)(visibleOptions);\n    var isEveryVisibleOptionSelected = (0, _every3.default)(visibleOptions, function (_ref7) {\n      var optionIndex = _ref7.optionIndex;\n      return (0, _includes3.default)(selectedIndices, optionIndex);\n    });\n    var isAnyVisibleOptionSelected = (0, _some3.default)(visibleOptions, function (_ref8) {\n      var optionIndex = _ref8.optionIndex;\n      return (0, _includes3.default)(selectedIndices, optionIndex);\n    }); // for each option group passed in, render a DropMenu.OptionGroup, any label will be included in it's children, render each option inside the group\n\n    var dropMenuOptions = [_react2.default.createElement(_DropMenu.DropMenuDumb.FixedOption, {\n      className: cx('&-Option-select-all'),\n      key: 'SearchableMultiSelectOption-select-all',\n      isHidden: !hasSelectAll,\n      isDisabled: isLoading\n    }, _react2.default.createElement(_CheckboxLabeled2.default, {\n      className: cx('&-CheckboxLabeled'),\n      isSelected: isEveryVisibleOptionSelected,\n      isIndeterminate: !isEveryVisibleOptionSelected && isAnyVisibleOptionSelected,\n      Label: 'Select All'\n    }))].concat((0, _map3.default)(optionGroups, function (optionGroupProps, optionGroupIndex) {\n      return _react2.default.createElement(_DropMenu.DropMenuDumb.OptionGroup, _extends({\n        key: 'SearchableMultiSelectOptionGroup' + optionGroupIndex\n      }, (0, _omit3.default)(optionGroupProps, 'children', 'Selected')), optionGroupProps.children, (0, _map3.default)(optionGroupDataLookup[optionGroupIndex], _this3.renderOption));\n    }).concat( // then render all the ungrouped options at the end\n    (0, _map3.default)(ungroupedOptionData, this.renderOption)));\n\n    if (!isAllOptionsHidden || (0, _isEmpty3.default)(searchText)) {\n      return dropMenuOptions;\n    }\n\n    if (!isLoading) {\n      return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, {\n        isDisabled: true\n      }, _react2.default.createElement('span', {\n        className: cx('&-noresults')\n      }, 'No results match \"', searchText, '\"'));\n    }\n\n    return null;\n  },\n  render: function render() {\n    var _this4 = this;\n\n    var props = this.props,\n        _props5 = this.props,\n        className = _props5.className,\n        isLoading = _props5.isLoading,\n        isDisabled = _props5.isDisabled,\n        maxMenuHeight = _props5.maxMenuHeight,\n        selectedIndices = _props5.selectedIndices,\n        dropMenuProps = _props5.DropMenu,\n        optionContainerStyle = _props5.DropMenu.optionContainerStyle,\n        responsiveMode = _props5.responsiveMode,\n        searchText = _props5.searchText,\n        hasRemoveAll = _props5.hasRemoveAll,\n        hasSelections = _props5.hasSelections,\n        passThroughs = _objectWithoutProperties(_props5, ['className', 'isLoading', 'isDisabled', 'maxMenuHeight', 'selectedIndices', 'DropMenu', 'DropMenu', 'responsiveMode', 'searchText', 'hasRemoveAll', 'hasSelections']);\n\n    var _state2 = this.state,\n        optionGroupDataLookup = _state2.optionGroupDataLookup,\n        optionGroups = _state2.optionGroups,\n        ungroupedOptionData = _state2.ungroupedOptionData;\n    var searchFieldProps = (0, _get3.default)((0, _componentTypes.getFirst)(props, SearchableMultiSelect.SearchField), 'props', {});\n\n    var selectionLabel = (0, _componentTypes.getFirst)(props, SearchableMultiSelect.SelectionLabel) || _react2.default.createElement(SearchableMultiSelect.SelectionLabel, null, 'Selected');\n\n    var isSmall = responsiveMode === 'small';\n    return _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(passThroughs, SearchableMultiSelect), {\n      className: cx('&', className)\n    }), _react2.default.createElement(_DropMenu.DropMenuDumb, _extends({}, dropMenuProps, {\n      selectedIndices: null,\n      className: cx('&-DropMenu', {\n        '&-DropMenu-is-small': isSmall\n      }, dropMenuProps.className),\n      optionContainerStyle: (0, _assign3.default)({}, optionContainerStyle, !(0, _isNil3.default)(maxMenuHeight) ? {\n        maxHeight: maxMenuHeight\n      } : null),\n      isDisabled: isDisabled,\n      onSelect: this.handleDropMenuSelect,\n      ContextMenu: {\n        alignmentOffset: -13,\n        directonOffset: -1,\n        minWidthOffset: -28\n      }\n    }), _react2.default.createElement(_DropMenu.DropMenuDumb.Control, null, _react2.default.createElement(_SearchField.SearchFieldDumb, _extends({}, searchFieldProps, {\n      isDisabled: isDisabled,\n      className: cx('&-search', {\n        '&-search-is-small': isSmall\n      }, searchFieldProps.className),\n      value: searchText,\n      onChange: this.handleSearch\n    }))), isLoading ? _react2.default.createElement(_DropMenu.DropMenuDumb.Option, {\n      key: 'SearchableMultiSelectLoading',\n      className: cx('&-loading'),\n      isDisabled: true\n    }, _react2.default.createElement(_LoadingIcon2.default, null)) : null, this.renderOptions()), hasSelections && !(0, _isEmpty3.default)(selectedIndices) ? _react2.default.createElement(_Selection2.default, {\n      className: cx('&-Selection-section'),\n      isBold: true,\n      hasBackground: true,\n      kind: 'container',\n      onRemove: this.handleRemoveAll,\n      responsiveMode: responsiveMode,\n      isRemovable: hasRemoveAll\n    }, _react2.default.createElement(_Selection2.default.Label, null, selectionLabel.props.children), (0, _map3.default)(optionGroupDataLookup, function (groupedOptionsData, optionGroupIndex) {\n      var selectedGroupedOptions = (0, _filter3.default)(groupedOptionsData, function (_ref9) {\n        var optionIndex = _ref9.optionIndex;\n        return (0, _includes3.default)(selectedIndices, optionIndex);\n      });\n\n      if (!(0, _isEmpty3.default)(selectedGroupedOptions)) {\n        var selectedOptionGroupChildren = (0, _get3.default)((0, _componentTypes.getFirst)(optionGroups[optionGroupIndex], SearchableMultiSelect.OptionGroup.Selected), 'props.children');\n        return _react2.default.createElement(_Selection2.default, {\n          className: cx('&-Selection-group'),\n          key: 'optionGroup-' + optionGroupIndex,\n          responsiveMode: responsiveMode,\n          isRemovable: false,\n          isBold: true,\n          kind: 'container'\n        }, _react2.default.createElement(_Selection2.default.Label, null, !(0, _isNil3.default)(selectedOptionGroupChildren) ? selectedOptionGroupChildren : (0, _first3.default)((0, _componentTypes.rejectTypes)(optionGroups[optionGroupIndex].children, SearchableMultiSelect.Option))), (0, _map3.default)(selectedGroupedOptions, function (_ref10) {\n          var optionIndex = _ref10.optionIndex,\n              optionProps = _ref10.optionProps;\n          var selectionProps = (0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selection), 'props');\n          return _react2.default.createElement(_Selection2.default, _extends({\n            key: optionIndex\n          }, selectionProps, {\n            callbackId: optionIndex,\n            responsiveMode: responsiveMode,\n            onRemove: _this4.handleSelectionRemove\n          }), _react2.default.createElement(_Selection2.default.Label, null, (0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selected), 'props.children') || ((0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children) : optionProps.children)));\n        }));\n      }\n\n      return null;\n    }), (0, _map3.default)(selectedIndices, function (selectedIndex) {\n      var selectedUngroupedOptionData = (0, _find3.default)(ungroupedOptionData, {\n        optionIndex: selectedIndex\n      });\n\n      if (selectedUngroupedOptionData) {\n        var optionProps = selectedUngroupedOptionData.optionProps;\n        var selectionProps = (0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selection), 'props');\n        return _react2.default.createElement(_Selection2.default, _extends({\n          key: selectedIndex\n        }, selectionProps, {\n          callbackId: selectedIndex,\n          responsiveMode: responsiveMode,\n          onRemove: _this4.handleSelectionRemove\n        }), _react2.default.createElement(_Selection2.default.Label, null, (0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selected), 'props.children') || ((0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children) : optionProps.children)));\n      }\n\n      return null;\n    })) : null);\n  }\n});\nexports.default = (0, _stateManagement.buildHybridComponent)(SearchableMultiSelect);\nexports.SearchableMultiSelectDumb = SearchableMultiSelect;","map":null,"metadata":{},"sourceType":"script"}