{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PureToolTip = undefined;\n\nvar _flatten2 = require('lodash/flatten');\n\nvar _flatten3 = _interopRequireDefault(_flatten2);\n\nvar _last2 = require('lodash/last');\n\nvar _last3 = _interopRequireDefault(_last2);\n\nvar _max2 = require('lodash/max');\n\nvar _max3 = _interopRequireDefault(_max2);\n\nvar _times2 = require('lodash/times');\n\nvar _times3 = _interopRequireDefault(_times2);\n\nvar _identity2 = require('lodash/identity');\n\nvar _identity3 = _interopRequireDefault(_identity2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _memoize2 = require('lodash/memoize');\n\nvar _memoize3 = _interopRequireDefault(_memoize2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _chartHelpers = require('../../util/chart-helpers');\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _d3Scale = require('d3-scale');\n\nvar d3Scale = _interopRequireWildcard(_d3Scale);\n\nvar _charts = require('../../constants/charts');\n\nvar chartConstants = _interopRequireWildcard(_charts);\n\nvar _reactAddonsShallowCompare = require('react-addons-shallow-compare');\n\nvar _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);\n\nvar _Bar = require('../Bar/Bar');\n\nvar _Bar2 = _interopRequireDefault(_Bar);\n\nvar _ToolTip = require('../ToolTip/ToolTip');\n\nvar _Legend = require('../Legend/Legend');\n\nvar _Legend2 = _interopRequireDefault(_Legend);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} // memoizing to maintain referential equality across renders, for performance\n// optimization with shallow comparison\n\n\nvar memoizedExtractFields = (0, _memoize3.default)(_chartHelpers.extractFields);\nvar memoizedStackByFields = (0, _memoize3.default)(_chartHelpers.stackByFields);\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-Bars');\n\nvar arrayOf = _propTypes2.default.arrayOf,\n    func = _propTypes2.default.func,\n    number = _propTypes2.default.number,\n    object = _propTypes2.default.object,\n    bool = _propTypes2.default.bool,\n    string = _propTypes2.default.string;\nvar Bars = (0, _componentTypes.createClass)({\n  displayName: 'Bars',\n  statics: {},\n  propTypes: {\n    className: string,\n    data: arrayOf(object).isRequired,\n    legend: object,\n    hasToolTips: bool,\n    palette: arrayOf(string),\n    colorMap: object,\n    xScale: func.isRequired,\n    xField: string,\n    xFormatter: func,\n    yScale: func.isRequired,\n    yFields: arrayOf(string),\n    yFormatter: func,\n    yStackedMax: number,\n    yTooltipFormatter: func,\n    isStacked: bool,\n    colorOffset: number,\n    renderTooltipBody: func\n  },\n  defaultTooltipFormatter: function defaultTooltipFormatter(dataPoint) {\n    var _props = this.props,\n        colorMap = _props.colorMap,\n        colorOffset = _props.colorOffset,\n        isStacked = _props.isStacked,\n        legend = _props.legend,\n        palette = _props.palette,\n        yFields = _props.yFields,\n        yFormatter = _props.yFormatter,\n        yTooltipFormatter = _props.yTooltipFormatter;\n    return _react2.default.createElement(_Legend2.default, {\n      hasBorders: false,\n      isReversed: isStacked\n    }, (0, _map3.default)(yFields, function (field, fieldIndex) {\n      return _react2.default.createElement(_Legend2.default.Item, {\n        key: fieldIndex,\n        hasPoint: true,\n        pointKind: 1,\n        color: (0, _get3.default)(colorMap, field, palette[(fieldIndex + colorOffset) % palette.length])\n      }, yTooltipFormatter((0, _get3.default)(legend, field, field), yFormatter(dataPoint[field]), dataPoint[field]));\n    }));\n  },\n  handleMouseEnter: function handleMouseEnter(hoveringSeriesIndex) {\n    this.setState({\n      hoveringSeriesIndex: hoveringSeriesIndex\n    });\n  },\n  handleMouseOut: function handleMouseOut() {\n    this.setState({\n      hoveringSeriesIndex: null\n    });\n  },\n  shouldComponentUpdate: function shouldComponentUpdate() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _reactAddonsShallowCompare2.default.apply(undefined, [this].concat(_toConsumableArray(args)));\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      hasToolTips: true,\n      xField: 'x',\n      xFormatter: _identity3.default,\n      yFields: ['y'],\n      yFormatter: _identity3.default,\n      yTooltipFormatter: function yTooltipFormatter(yField, yValueFormatted) {\n        return yField + ': ' + yValueFormatted;\n      },\n      renderTooltipBody: null,\n      isStacked: false,\n      colorOffset: 0,\n      palette: chartConstants.PALETTE_6\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      hoveringSeriesIndex: null\n    };\n  },\n  render: function render() {\n    var _this = this;\n\n    var _props2 = this.props,\n        className = _props2.className,\n        data = _props2.data,\n        hasToolTips = _props2.hasToolTips,\n        palette = _props2.palette,\n        colorMap = _props2.colorMap,\n        colorOffset = _props2.colorOffset,\n        xScale = _props2.xScale,\n        xField = _props2.xField,\n        xFormatter = _props2.xFormatter,\n        yScaleOriginal = _props2.yScale,\n        yFields = _props2.yFields,\n        yStackedMax = _props2.yStackedMax,\n        renderTooltipBody = _props2.renderTooltipBody,\n        isStacked = _props2.isStacked,\n        passThroughs = _objectWithoutProperties(_props2, ['className', 'data', 'hasToolTips', 'palette', 'colorMap', 'colorOffset', 'xScale', 'xField', 'xFormatter', 'yScale', 'yFields', 'yStackedMax', 'renderTooltipBody', 'isStacked']);\n\n    var hoveringSeriesIndex = this.state.hoveringSeriesIndex; // This scale is used for grouped bars\n\n    var innerXScale = d3Scale.scaleBand().domain((0, _times3.default)(yFields.length)).range([0, xScale.bandwidth()]).round(true); // Copy the original so we can mutate it\n\n    var yScale = yScaleOriginal.copy(); // If we are stacked, we need to calculate a new domain based on the sum of\n    // the various series' y data. One row per series.\n\n    var transformedData = isStacked ? memoizedStackByFields(data, yFields) : memoizedExtractFields(data, yFields); // If we are stacked, we need to calculate a new domain based on the sum of\n    // the various group's y data\n\n    if (isStacked) {\n      yScale.domain([yScale.domain()[0], yStackedMax || (0, _max3.default)((0, _map3.default)(transformedData, function (x) {\n        return (0, _last3.default)((0, _last3.default)(x));\n      }))]);\n    }\n\n    return _react2.default.createElement('g', _extends({}, (0, _componentTypes.omitProps)(passThroughs, Bars), {\n      className: cx(className, '&')\n    }), (0, _map3.default)(transformedData, function (series, seriesIndex) {\n      return _react2.default.createElement('g', {\n        key: seriesIndex\n      }, (0, _map3.default)(series, function (_ref, pointsIndex) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            start = _ref2[0],\n            end = _ref2[1];\n\n        return _react2.default.createElement(_Bar2.default, {\n          key: pointsIndex,\n          x: isStacked ? xScale(data[seriesIndex][xField]) : innerXScale(pointsIndex) + xScale(data[seriesIndex][xField]),\n          y: yScale(end),\n          height: yScale(start) - yScale(end),\n          width: isStacked ? xScale.bandwidth() : innerXScale.bandwidth(),\n          color: (0, _get3.default)(colorMap, yFields[pointsIndex], palette[(pointsIndex + colorOffset) % palette.length])\n        });\n      }), _react2.default.createElement(PureToolTip, {\n        isExpanded: hasToolTips && hoveringSeriesIndex === seriesIndex,\n        height: isStacked ? yScale.range()[0] - yScale((0, _last3.default)(series)[1]) : yScale.range()[0] - yScale((0, _max3.default)((0, _flatten3.default)(series))),\n        width: xScale.bandwidth(),\n        x: xScale(data[seriesIndex][xField]),\n        y: yScale((0, _max3.default)((0, _flatten3.default)(series))),\n        series: series,\n        seriesIndex: seriesIndex,\n        onMouseEnter: _this.handleMouseEnter,\n        onMouseOut: _this.handleMouseOut,\n        xFormatter: xFormatter,\n        xField: xField,\n        renderBody: renderTooltipBody || _this.defaultTooltipFormatter,\n        data: data\n      }));\n    }));\n  }\n});\nvar PureToolTip = exports.PureToolTip = (0, _componentTypes.createClass)({\n  _isPrivate: true,\n  propTypes: {\n    data: arrayOf(object),\n    height: number,\n    isExpanded: bool,\n    onMouseEnter: func,\n    onMouseOut: func,\n    renderBody: func,\n    seriesIndex: number,\n    width: number,\n    x: number,\n    xField: string,\n    xFormatter: func,\n    y: number\n  },\n  shouldComponentUpdate: function shouldComponentUpdate() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _reactAddonsShallowCompare2.default.apply(undefined, [this].concat(_toConsumableArray(args)));\n  },\n  handleMouseEnter: function handleMouseEnter() {\n    this.props.onMouseEnter(this.props.seriesIndex);\n  },\n  render: function render() {\n    var _props3 = this.props,\n        isExpanded = _props3.isExpanded,\n        height = _props3.height,\n        width = _props3.width,\n        x = _props3.x,\n        y = _props3.y,\n        seriesIndex = _props3.seriesIndex,\n        onMouseOut = _props3.onMouseOut,\n        renderBody = _props3.renderBody,\n        data = _props3.data,\n        xFormatter = _props3.xFormatter,\n        xField = _props3.xField;\n    return _react2.default.createElement(_ToolTip.ToolTipDumb, {\n      isExpanded: isExpanded,\n      flyOutMaxWidth: 'none'\n    }, _react2.default.createElement(_ToolTip.ToolTipDumb.Target, {\n      elementType: 'g'\n    }, _react2.default.createElement('rect', {\n      className: cx('&-tooltip-hover-zone'),\n      height: height,\n      width: width,\n      x: x,\n      y: y,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseOut: onMouseOut\n    })), _react2.default.createElement(_ToolTip.ToolTipDumb.Title, null, xFormatter(data[seriesIndex][xField])), _react2.default.createElement(_ToolTip.ToolTipDumb.Body, null, renderBody(data[seriesIndex])));\n  }\n});\nexports.default = Bars;","map":null,"metadata":{},"sourceType":"script"}