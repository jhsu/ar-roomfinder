{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutocompleteDumb = undefined;\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _escapeRegExp2 = require('lodash/escapeRegExp');\n\nvar _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _noop2 = require('lodash/noop');\n\nvar _noop3 = _interopRequireDefault(_noop2);\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _stateManagement = require('../../util/state-management');\n\nvar _textManipulation = require('../../util/text-manipulation');\n\nvar _Autocomplete = require('./Autocomplete.reducers');\n\nvar reducers = _interopRequireWildcard(_Autocomplete);\n\nvar _keyCode = require('../../constants/key-code');\n\nvar KEYCODE = _interopRequireWildcard(_keyCode);\n\nvar _DropMenu = require('../DropMenu/DropMenu');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-Autocomplete');\n\nvar arrayOf = _propTypes2.default.arrayOf,\n    bool = _propTypes2.default.bool,\n    func = _propTypes2.default.func,\n    object = _propTypes2.default.object,\n    shape = _propTypes2.default.shape,\n    string = _propTypes2.default.string;\nvar Autocomplete = (0, _componentTypes.createClass)({\n  statics: {},\n  displayName: 'Autocomplete',\n  _isPrivate: true,\n  reducers: reducers,\n  propTypes: {\n    className: string,\n    style: object,\n    isDisabled: bool,\n    suggestions: arrayOf(string),\n    value: string,\n    DropMenu: shape(_DropMenu.DropMenuDumb.propTypes),\n    onChange: func,\n    onSelect: func,\n    onExpand: func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      isDisabled: false,\n      suggestions: [],\n      value: '',\n      onChange: _noop3.default,\n      onSelect: _noop3.default,\n      onExpand: _noop3.default,\n      DropMenu: _DropMenu.DropMenuDumb.getDefaultProps()\n    };\n  },\n  handleSelect: function handleSelect(optionIndex, _ref) {\n    var event = _ref.event;\n    var _props = this.props,\n        suggestions = _props.suggestions,\n        onChange = _props.onChange,\n        onSelect = _props.onSelect;\n    onChange(suggestions[optionIndex], {\n      event: event,\n      props: this.props\n    });\n    onSelect(optionIndex, {\n      event: event,\n      props: this.props\n    });\n  },\n  handleInput: function handleInput(event) {\n    var _props2 = this.props,\n        onChange = _props2.onChange,\n        onExpand = _props2.onExpand,\n        onCollapse = _props2.DropMenu.onCollapse;\n    onChange(event.target.value, {\n      event: event,\n      props: this.props\n    });\n\n    if (!(0, _isEmpty3.default)(event.target.value)) {\n      onExpand({\n        event: event,\n        props: this.props\n      });\n    } else {\n      onCollapse();\n    }\n  },\n  getInputValue: function getInputValue() {\n    return (0, _get3.default)(this.refs, 'inputNode.value', this.props.value);\n  },\n  setInputValue: function setInputValue(value) {\n    if (this.refs.inputNode) {\n      this.refs.inputNode.value = value;\n    }\n  },\n  handleInputKeydown: function handleInputKeydown(event) {\n    var _props3 = this.props,\n        onExpand = _props3.onExpand,\n        _props3$DropMenu = _props3.DropMenu,\n        isExpanded = _props3$DropMenu.isExpanded,\n        focusedIndex = _props3$DropMenu.focusedIndex,\n        onCollapse = _props3$DropMenu.onCollapse;\n    var value = this.getInputValue();\n\n    if (event.keyCode === KEYCODE.Tab && isExpanded && focusedIndex !== null) {\n      this.handleSelect(focusedIndex, {\n        event: event,\n        props: this.props\n      });\n      event.preventDefault();\n    }\n\n    if (event.keyCode === KEYCODE.ArrowDown && !isExpanded) {\n      event.stopPropagation();\n\n      if ((0, _isEmpty3.default)(value)) {\n        onExpand({\n          event: event,\n          props: this.props\n        });\n      }\n    }\n\n    if (event.keyCode === KEYCODE.Escape) {\n      event.stopPropagation();\n      onCollapse(event);\n    }\n\n    if (event.keyCode === KEYCODE.Enter && focusedIndex === null) {\n      event.stopPropagation();\n      onCollapse(event);\n    }\n  },\n  handleControlClick: function handleControlClick(event) {\n    var _props4 = this.props,\n        onExpand = _props4.onExpand,\n        _props4$DropMenu = _props4.DropMenu,\n        isExpanded = _props4$DropMenu.isExpanded,\n        onCollapse = _props4$DropMenu.onCollapse;\n\n    if (event.target === this.refs.inputNode) {\n      onExpand({\n        event: event,\n        props: this.props\n      });\n    } else {\n      if (isExpanded) {\n        onCollapse(event);\n      } else {\n        onExpand({\n          event: event,\n          props: this.props\n        });\n      }\n\n      this.refs.inputNode.focus();\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    var value = this.props.value;\n    this.refs.inputNode.addEventListener('input', this.handleInput);\n    this.setInputValue(value);\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var value = nextProps.value;\n\n    if (value !== this.getInputValue()) {\n      this.setInputValue(value);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this.refs.inputNode) {\n      this.refs.inputNode.removeEventListener('input', this.handleInput);\n    }\n  },\n  render: function render() {\n    var _props5 = this.props,\n        style = _props5.style,\n        className = _props5.className,\n        isDisabled = _props5.isDisabled,\n        dropMenuProps = _props5.DropMenu,\n        suggestions = _props5.suggestions,\n        passThroughs = _objectWithoutProperties(_props5, ['style', 'className', 'isDisabled', 'DropMenu', 'suggestions']);\n\n    var isExpanded = dropMenuProps.isExpanded;\n    var value = this.getInputValue();\n    var valuePattern = new RegExp((0, _escapeRegExp3.default)(value), 'i');\n    return _react2.default.createElement(_DropMenu.DropMenuDumb, _extends({}, dropMenuProps, {\n      isDisabled: isDisabled,\n      selectedIndices: [],\n      className: cx('&', className),\n      onSelect: this.handleSelect,\n      style: style\n    }), _react2.default.createElement(_DropMenu.DropMenuDumb.Control, {\n      onClick: this.handleControlClick\n    }, _react2.default.createElement('div', {\n      className: cx('&-Control', {\n        '&-Control-is-expanded': isExpanded,\n        '&-Control-is-disabled': isDisabled\n      })\n    }, _react2.default.createElement('input', _extends({}, (0, _omit3.default)(passThroughs, ['onChange', 'onSelect', 'onExpand', 'value', 'children']), {\n      type: 'text',\n      className: cx('&-Control-input'),\n      ref: 'inputNode',\n      onKeyDown: this.handleInputKeydown,\n      disabled: isDisabled\n    })))), value ? (0, _map3.default)(suggestions, function (suggestion) {\n      return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, {\n        key: 'AutocompleteOption' + suggestion\n      }, function () {\n        var _partitionText = (0, _textManipulation.partitionText)(suggestion, valuePattern, value.length),\n            _partitionText2 = _slicedToArray(_partitionText, 3),\n            pre = _partitionText2[0],\n            match = _partitionText2[1],\n            post = _partitionText2[2];\n\n        var formattedSuggestion = [];\n\n        if (pre) {\n          formattedSuggestion.push(_react2.default.createElement('span', {\n            key: 'AutocompleteOption-suggestion-pre-' + suggestion,\n            className: cx('&-Option-suggestion-pre')\n          }, pre));\n        }\n\n        if (match) {\n          formattedSuggestion.push(_react2.default.createElement('span', {\n            key: 'AutocompleteOption-suggestion-match-' + suggestion,\n            className: cx('&-Option-suggestion-match')\n          }, match));\n        }\n\n        if (post) {\n          formattedSuggestion.push(_react2.default.createElement('span', {\n            key: 'AutocompleteOption-suggestion-post-' + suggestion,\n            className: cx('&-Option-suggestion-post')\n          }, post));\n        }\n\n        return formattedSuggestion;\n      }());\n    }) : (0, _map3.default)(suggestions, function (suggestion) {\n      return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, {\n        key: 'AutocompleteOption' + suggestion\n      }, suggestion);\n    }));\n  }\n});\nexports.default = (0, _stateManagement.buildHybridComponent)(Autocomplete);\nexports.AutocompleteDumb = Autocomplete;","map":null,"metadata":{},"sourceType":"script"}