{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _identity2 = require('lodash/identity');\n\nvar _identity3 = _interopRequireDefault(_identity2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _chartHelpers = require('../../util/chart-helpers');\n\nvar _d3Scale = require('d3-scale');\n\nvar d3Scale = _interopRequireWildcard(_d3Scale);\n\nvar _charts = require('../../constants/charts');\n\nvar chartConstants = _interopRequireWildcard(_charts);\n\nvar _Axis = require('../Axis/Axis');\n\nvar _Axis2 = _interopRequireDefault(_Axis);\n\nvar _AxisLabel = require('../AxisLabel/AxisLabel');\n\nvar _AxisLabel2 = _interopRequireDefault(_AxisLabel);\n\nvar _Bars = require('../Bars/Bars');\n\nvar _Bars2 = _interopRequireDefault(_Bars);\n\nvar _ContextMenu = require('../ContextMenu/ContextMenu');\n\nvar _ContextMenu2 = _interopRequireDefault(_ContextMenu);\n\nvar _Legend = require('../Legend/Legend');\n\nvar _Legend2 = _interopRequireDefault(_Legend);\n\nvar _EmptyStateWrapper = require('../EmptyStateWrapper/EmptyStateWrapper');\n\nvar _EmptyStateWrapper2 = _interopRequireDefault(_EmptyStateWrapper);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-BarChart');\n\nvar arrayOf = _propTypes2.default.arrayOf,\n    func = _propTypes2.default.func,\n    number = _propTypes2.default.number,\n    object = _propTypes2.default.object,\n    shape = _propTypes2.default.shape,\n    string = _propTypes2.default.string,\n    array = _propTypes2.default.array,\n    bool = _propTypes2.default.bool,\n    oneOfType = _propTypes2.default.oneOfType,\n    oneOf = _propTypes2.default.oneOf;\nvar BarChart = (0, _componentTypes.createClass)({\n  displayName: 'BarChart',\n  statics: {\n    PADDING: 0.05,\n    PADDING_GROUPED_OR_STACKED: 0.3,\n    MARGIN: {\n      top: 10,\n      right: 20,\n      bottom: 50,\n      left: 80\n    }\n  },\n  propTypes: {\n    className: string,\n    height: number,\n    width: number,\n    margin: shape({\n      top: number,\n      right: number,\n      bottom: number,\n      left: number\n    }),\n    data: arrayOf(object),\n    legend: object,\n    isLoading: bool,\n    hasToolTips: bool,\n    hasLegend: bool,\n    palette: arrayOf(string),\n    colorMap: object,\n    xAxisField: string,\n    xAxisTickCount: number,\n    xAxisFormatter: func,\n    xAxisTitle: string,\n    xAxisTitleColor: oneOfType([number, string]),\n    yAxisFields: array,\n    yAxisMin: number,\n    yAxisMax: number,\n    yAxisFormatter: func,\n    yAxisIsStacked: bool,\n    yAxisTickCount: number,\n    yAxisTitle: string,\n    yAxisTitleColor: oneOfType([number, string]),\n    yAxisTooltipFormatter: func,\n    yAxisTooltipDataFormatter: func,\n    renderTooltipBody: func,\n    xAxisTextOrientation: oneOf(['vertical', 'horizontal', 'diagonal']),\n    yAxisTextOrientation: oneOf(['vertical', 'horizontal', 'diagonal'])\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      height: 400,\n      width: 1000,\n      // duplicated because `statics` aren't available during getDefaultProps\n      margin: {\n        top: 10,\n        right: 20,\n        bottom: 50,\n        left: 80\n      },\n      palette: chartConstants.PALETTE_6,\n      hasToolTips: true,\n      hasLegend: false,\n      renderTooltipBody: null,\n      xAxisField: 'x',\n      xAxisTickCount: null,\n      xAxisTitle: null,\n      xAxisTitleColor: '#000',\n      xAxisFormatter: _identity3.default,\n      xAxisTextOrientation: 'horizontal',\n      yAxisFields: ['y'],\n      yAxisTickCount: null,\n      yAxisIsStacked: false,\n      yAxisMin: 0,\n      yAxisTitle: null,\n      yAxisTitleColor: '#000',\n      yAxisTooltipFormatter: function yAxisTooltipFormatter(yField, yValueFormatted) {\n        return yField + ': ' + yValueFormatted;\n      },\n      yAxisTextOrientation: 'horizontal'\n    };\n  },\n  components: {\n    /**\n     * Renders wrapper when the data table has no data.\n     */\n    EmptyStateWrapper: _EmptyStateWrapper2.default\n  },\n  render: function render() {\n    var _props = this.props,\n        className = _props.className,\n        height = _props.height,\n        width = _props.width,\n        marginOriginal = _props.margin,\n        data = _props.data,\n        legend = _props.legend,\n        isLoading = _props.isLoading,\n        hasToolTips = _props.hasToolTips,\n        hasLegend = _props.hasLegend,\n        palette = _props.palette,\n        colorMap = _props.colorMap,\n        renderTooltipBody = _props.renderTooltipBody,\n        xAxisField = _props.xAxisField,\n        xAxisFormatter = _props.xAxisFormatter,\n        xAxisTitle = _props.xAxisTitle,\n        xAxisTitleColor = _props.xAxisTitleColor,\n        xAxisTickCount = _props.xAxisTickCount,\n        xAxisTextOrientation = _props.xAxisTextOrientation,\n        yAxisFields = _props.yAxisFields,\n        yAxisFormatter = _props.yAxisFormatter,\n        yAxisTitle = _props.yAxisTitle,\n        yAxisTitleColor = _props.yAxisTitleColor,\n        yAxisIsStacked = _props.yAxisIsStacked,\n        yAxisTickCount = _props.yAxisTickCount,\n        yAxisMin = _props.yAxisMin,\n        yAxisTooltipFormatter = _props.yAxisTooltipFormatter,\n        yAxisTooltipDataFormatter = _props.yAxisTooltipDataFormatter,\n        _props$yAxisMax = _props.yAxisMax,\n        yAxisMax = _props$yAxisMax === undefined ? yAxisIsStacked ? (0, _chartHelpers.maxByFieldsStacked)(data, yAxisFields) : (0, _chartHelpers.maxByFields)(data, yAxisFields) : _props$yAxisMax,\n        yAxisTextOrientation = _props.yAxisTextOrientation,\n        passThroughs = _objectWithoutProperties(_props, ['className', 'height', 'width', 'margin', 'data', 'legend', 'isLoading', 'hasToolTips', 'hasLegend', 'palette', 'colorMap', 'renderTooltipBody', 'xAxisField', 'xAxisFormatter', 'xAxisTitle', 'xAxisTitleColor', 'xAxisTickCount', 'xAxisTextOrientation', 'yAxisFields', 'yAxisFormatter', 'yAxisTitle', 'yAxisTitleColor', 'yAxisIsStacked', 'yAxisTickCount', 'yAxisMin', 'yAxisTooltipFormatter', 'yAxisTooltipDataFormatter', 'yAxisMax', 'yAxisTextOrientation']);\n\n    var margin = _extends({}, BarChart.MARGIN, marginOriginal);\n\n    var svgClasses = cx(className, '&');\n    var innerWidth = width - margin.left - margin.right;\n    var innerHeight = height - margin.top - margin.bottom; // `paddingInner` determines the space between the bars or groups of bars\n\n    var paddingInner = yAxisFields.length > 1 ? BarChart.PADDING_GROUPED_OR_STACKED : BarChart.PADDING;\n    var xScale = d3Scale.scaleBand().domain((0, _map3.default)(data, xAxisField)).range([0, innerWidth]).paddingInner(paddingInner).paddingOuter(0.5);\n    var yScale = d3Scale.scaleLinear().domain([yAxisMin, yAxisMax]).range([innerHeight, 0]);\n    var xAxisFinalFormatter = xAxisFormatter || xScale.tickFormat();\n    var yAxisFinalFormatter = yAxisFormatter || yScale.tickFormat();\n    var yFinalFormatter = yAxisTooltipDataFormatter ? yAxisTooltipDataFormatter : yAxisFinalFormatter;\n\n    if ((0, _isEmpty3.default)(data) || width < 1 || height < 1 || isLoading) {\n      var emptyStateWrapper = (0, _componentTypes.getFirst)(this.props, BarChart.EmptyStateWrapper) || _react2.default.createElement(BarChart.EmptyStateWrapper, {\n        Title: 'You have no data.'\n      });\n\n      return _react2.default.createElement(_EmptyStateWrapper2.default, _extends({}, emptyStateWrapper.props, {\n        isEmpty: (0, _isEmpty3.default)(data),\n        isLoading: isLoading\n      }), emptyStateWrapper.props.children, _react2.default.createElement('svg', _extends({}, (0, _componentTypes.omitProps)(passThroughs, BarChart), {\n        className: svgClasses,\n        width: width,\n        height: height\n      }), _react2.default.createElement('g', {\n        transform: 'translate(' + margin.left + ', ' + (innerHeight + margin.top) + ')'\n      }, _react2.default.createElement(_Axis2.default, {\n        orient: 'bottom',\n        scale: xScale,\n        tickCount: xAxisTickCount\n      })), _react2.default.createElement('g', {\n        transform: 'translate(' + margin.left + ', ' + margin.top + ')'\n      }, _react2.default.createElement(_Axis2.default, {\n        orient: 'left',\n        scale: yScale,\n        tickFormat: yFinalFormatter,\n        tickCount: yAxisTickCount\n      }))));\n    }\n\n    return _react2.default.createElement('svg', _extends({}, (0, _componentTypes.omitProps)(passThroughs, BarChart), {\n      className: svgClasses,\n      width: width,\n      height: height\n    }), _react2.default.createElement('g', {\n      transform: 'translate(' + margin.left + ', ' + (innerHeight + margin.top) + ')'\n    }, _react2.default.createElement(_Axis2.default, {\n      orient: 'bottom',\n      scale: xScale,\n      outerTickSize: 0,\n      tickFormat: xAxisFinalFormatter,\n      tickCount: xAxisTickCount,\n      textOrientation: xAxisTextOrientation\n    }), hasLegend ? _react2.default.createElement(_ContextMenu2.default, {\n      direction: 'down',\n      alignment: 'center',\n      directonOffset: (margin.bottom / 2 + _Legend2.default.HEIGHT / 2) * -1\n      /* should center the legend in the bottom margin */\n\n    }, _react2.default.createElement(_ContextMenu2.default.Target, {\n      elementType: 'g'\n    }, _react2.default.createElement('rect', {\n      className: cx('&-invisible'),\n      width: innerWidth,\n      height: margin.bottom\n    })), _react2.default.createElement(_ContextMenu2.default.FlyOut, {\n      className: cx('&-legend-container')\n    }, _react2.default.createElement(_Legend2.default, {\n      orient: 'horizontal'\n    }, (0, _map3.default)(yAxisFields, function (field, index) {\n      return _react2.default.createElement(_Legend2.default.Item, {\n        key: index,\n        hasPoint: true,\n        hasLine: false,\n        color: (0, _get3.default)(colorMap, field, palette[index % palette.length]),\n        pointKind: 1\n      }, (0, _get3.default)(legend, field, field));\n    })))) : null), xAxisTitle ? _react2.default.createElement('g', {\n      transform: 'translate(' + margin.left + ', ' + (margin.top + innerHeight) + ')'\n    }, _react2.default.createElement(_AxisLabel2.default, {\n      orient: 'bottom',\n      width: innerWidth,\n      height: margin.bottom,\n      label: xAxisTitle,\n      color: (0, _isString3.default)(xAxisTitleColor) ? xAxisTitleColor : palette[xAxisTitleColor % palette.length]\n    })) : null, _react2.default.createElement('g', {\n      transform: 'translate(' + margin.left + ', ' + margin.top + ')'\n    }, _react2.default.createElement(_Axis2.default, _defineProperty({\n      orient: 'left',\n      textOrientation: 'horizontal',\n      scale: yScale,\n      tickFormat: yAxisFinalFormatter,\n      tickCount: yAxisTickCount\n    }, 'textOrientation', yAxisTextOrientation))), yAxisTitle ? _react2.default.createElement('g', {\n      transform: 'translate(0, ' + margin.top + ')'\n    }, _react2.default.createElement(_AxisLabel2.default, {\n      orient: 'left',\n      width: margin.left,\n      height: innerHeight,\n      label: yAxisTitle,\n      color: (0, _isString3.default)(yAxisTitleColor) ? yAxisTitleColor : palette[yAxisTitleColor % palette.length]\n    })) : null, _react2.default.createElement('g', {\n      transform: 'translate(' + margin.left + ', ' + margin.top + ')'\n    }, _react2.default.createElement(_Bars2.default, {\n      xField: xAxisField,\n      xScale: xScale,\n      xFormatter: xAxisFormatter,\n      yFields: yAxisFields,\n      yScale: yScale,\n      yFormatter: yFinalFormatter,\n      yStackedMax: yAxisMax,\n      data: data,\n      isStacked: yAxisIsStacked,\n      yTooltipFormatter: yAxisTooltipFormatter,\n      hasToolTips: hasToolTips,\n      legend: legend,\n      palette: palette,\n      colorMap: colorMap,\n      renderTooltipBody: renderTooltipBody\n    })));\n  }\n});\nexports.default = BarChart;","map":null,"metadata":{},"sourceType":"script"}