{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _noop2 = require('lodash/noop');\n\nvar _noop3 = _interopRequireDefault(_noop2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _componentTypes = require('../../util/component-types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-DragCaptureZone');\n\nvar func = _propTypes2.default.func,\n    string = _propTypes2.default.string;\nvar DragCaptureZone = (0, _componentTypes.createClass)({\n  displayName: 'DragCaptureZone',\n  statics: {},\n  propTypes: {\n    className: string,\n    onDrag: func,\n    onDragEnd: func,\n    onDragStart: func,\n    onDragCancel: func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      onDrag: _noop3.default,\n      onDragEnd: _noop3.default,\n      onDragStart: _noop3.default,\n      onDragCancel: _noop3.default\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      pageX: 0,\n      pageY: 0\n    };\n  },\n  render: function render() {\n    var _this = this;\n\n    return _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(this.props, DragCaptureZone), {\n      className: cx('&', this.props.className),\n      key: 'DragCaptureZone',\n      onMouseDown: this.handleDragStart,\n      ref: function ref(_ref) {\n        _this.elementRef = _ref;\n      }\n    }));\n  },\n  componentDidMount: function componentDidMount() {\n    //add event listeners directly on the DOM element to allow preventDefault\n    //calls which are not honored due to react's event delegation\n    //reference: https://github.com/facebook/react/issues/8968\n    this.elementRef.addEventListener('touchstart', this.handleDragStart);\n    this.elementRef.addEventListener('touchmove', this.handleDrag);\n    this.elementRef.addEventListener('touchend', this.handleDragEnd);\n    this.elementRef.addEventListener('touchcancel', this.handleDragCancel);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.elementRef.removeEventListener('touchstart', this.handleDragStart);\n    this.elementRef.removeEventListener('touchmove', this.handleDrag);\n    this.elementRef.removeEventListener('touchend', this.handleDragEnd);\n    this.elementRef.removeEventListener('touchcancel', this.handleDragCancel);\n    window.document.removeEventListener('mousemove', this.handleDrag);\n    window.document.removeEventListener('mouseup', this.handleDragEnd);\n  },\n  handleDrag: function handleDrag(event) {\n    var pageX = void 0;\n    var pageY = void 0;\n    /* istanbul ignore next */\n\n    if (event.touches) {\n      pageX = event.touches[0].pageX;\n      pageY = event.touches[0].pageY;\n    } else {\n      pageX = event.pageX;\n      pageY = event.pageY;\n    }\n\n    event.preventDefault();\n    this.props.onDrag({\n      dX: pageX - this.state.pageX,\n      dY: pageY - this.state.pageY,\n      pageX: pageX,\n      pageY: pageY\n    }, {\n      event: event,\n      props: this.props\n    });\n  },\n  handleDragEnd: function handleDragEnd(event) {\n    var pageX = void 0;\n    var pageY = void 0;\n    /* istanbul ignore next */\n\n    if (event.changedTouches) {\n      pageX = event.changedTouches[0].pageX;\n      pageY = event.changedTouches[0].pageY;\n    } else {\n      pageX = event.pageX;\n      pageY = event.pageY;\n      window.document.removeEventListener('mousemove', this.handleDrag);\n      window.document.removeEventListener('mouseup', this.handleDragEnd);\n    }\n\n    event.preventDefault();\n    this.props.onDragEnd({\n      dX: pageX - this.state.pageX,\n      dY: pageY - this.state.pageY,\n      pageX: pageX,\n      pageY: pageY\n    }, {\n      event: event,\n      props: this.props\n    });\n    this.setState({\n      pageX: 0,\n      pageY: 0\n    });\n  },\n  handleDragStart: function handleDragStart(event) {\n    var pageX = void 0;\n    var pageY = void 0;\n    /* istanbul ignore next */\n\n    if (event.touches) {\n      pageX = event.touches[0].pageX;\n      pageY = event.touches[0].pageY;\n    } else {\n      pageX = event.pageX;\n      pageY = event.pageY;\n      window.document.addEventListener('mousemove', this.handleDrag);\n      window.document.addEventListener('mouseup', this.handleDragEnd);\n    }\n\n    event.preventDefault();\n    this.props.onDragStart({\n      dX: 0,\n      dY: 0,\n      pageX: pageX,\n      pageY: pageY\n    }, {\n      event: event,\n      props: this.props\n    });\n    this.setState({\n      pageX: pageX,\n      pageY: pageY\n    });\n  },\n  handleDragCancel: function handleDragCancel(event) {\n    this.props.onDragCancel({\n      event: event,\n      props: this.props\n    });\n    this.setState({\n      pageX: 0,\n      pageY: 0\n    });\n  }\n});\nexports.default = DragCaptureZone;","map":null,"metadata":{},"sourceType":"script"}