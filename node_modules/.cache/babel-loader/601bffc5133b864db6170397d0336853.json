{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDayPicker = require('react-day-picker');\n\nvar _reactDayPicker2 = _interopRequireDefault(_reactDayPicker);\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _componentTypes = require('../../util/component-types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-CalendarMonth');\n\nvar bool = _propTypes2.default.bool,\n    instanceOf = _propTypes2.default.instanceOf,\n    number = _propTypes2.default.number,\n    oneOf = _propTypes2.default.oneOf,\n    string = _propTypes2.default.string;\nvar CalendarMonth = (0, _componentTypes.createClass)({\n  displayName: 'CalendarMonth',\n  statics: {},\n  _isPrivate: true,\n  propTypes: {\n    className: string,\n    monthOffset: number,\n    initialMonth: instanceOf(Date),\n    cursor: instanceOf(Date),\n    from: instanceOf(Date),\n    to: instanceOf(Date),\n    selectMode: oneOf(['day', 'from', 'to']),\n    shouldComponentUpdate: bool\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      monthOffset: 0,\n      initialMonth: new Date(),\n      cursor: null,\n      from: null,\n      to: null,\n      selectMode: 'day',\n      shouldComponentUpdate: true\n    };\n  },\n  modifierRange: function modifierRange(day) {\n    var _props = this.props,\n        cursor = _props.cursor,\n        from = _props.from,\n        to = _props.to,\n        selectMode = _props.selectMode;\n\n    if (cursor) {\n      if (selectMode === 'day') {\n        return _reactDayPicker.DateUtils.isSameDay(day, new Date(cursor));\n      } else if (from || to) {\n        return _reactDayPicker.DateUtils.isDayInRange(day, {\n          from: new Date(selectMode === 'to' ? from : to),\n          to: new Date(cursor)\n        });\n      }\n\n      return _reactDayPicker.DateUtils.isSameDay(day, new Date(cursor));\n    }\n\n    if (from && to) {\n      return _reactDayPicker.DateUtils.isDayInRange(day, {\n        from: new Date(from),\n        to: new Date(to)\n      });\n    }\n\n    return false;\n  },\n  modifierFrom: function modifierFrom(day) {\n    var from = this.props.from;\n    return _reactDayPicker.DateUtils.isSameDay(day, new Date(from));\n  },\n  modifierTo: function modifierTo(day) {\n    var to = this.props.to;\n    return _reactDayPicker.DateUtils.isSameDay(day, new Date(to));\n  },\n  shouldComponentUpdate: function shouldComponentUpdate() {\n    return this.props.shouldComponentUpdate;\n  },\n  render: function render() {\n    var _props2 = this.props,\n        className = _props2.className,\n        monthOffset = _props2.monthOffset,\n        initialMonth = _props2.initialMonth,\n        passThroughs = _objectWithoutProperties(_props2, ['className', 'monthOffset', 'initialMonth']); // It can be tricky to increment months using JavaScript dates, this should\n    // handle the edge cases.\n    // http://stackoverflow.com/questions/499838/javascript-date-next-month\n\n\n    var monthDate = new Date(initialMonth.getFullYear(), initialMonth.getMonth() + monthOffset, 1);\n    return _react2.default.createElement(_reactDayPicker2.default, _extends({\n      key: monthOffset,\n      className: cx('&', className),\n      initialMonth: monthDate,\n      canChangeMonth: false,\n      weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n    }, passThroughs, {\n      modifiers: _extends({\n        range: this.modifierRange,\n        from: this.modifierFrom,\n        to: this.modifierTo\n      }, passThroughs.modifiers)\n    }));\n  }\n});\nexports.default = CalendarMonth;","map":null,"metadata":{},"sourceType":"script"}