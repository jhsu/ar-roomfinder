{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _mapValues2 = require('lodash/mapValues');\n\nvar _mapValues3 = _interopRequireDefault(_mapValues2);\n\nvar _first2 = require('lodash/first');\n\nvar _first3 = _interopRequireDefault(_first2);\n\nvar _defer2 = require('lodash/defer');\n\nvar _defer3 = _interopRequireDefault(_defer2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _noop2 = require('lodash/noop');\n\nvar _noop3 = _interopRequireDefault(_noop2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _DragCaptureZone = require('../DragCaptureZone/DragCaptureZone');\n\nvar _DragCaptureZone2 = _interopRequireDefault(_DragCaptureZone);\n\nvar _reactMotion = require('react-motion');\n\nvar _motionSpring = require('../../constants/motion-spring');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-SplitVertical');\n\nvar any = _propTypes2.default.any,\n    bool = _propTypes2.default.bool,\n    func = _propTypes2.default.func,\n    node = _propTypes2.default.node,\n    number = _propTypes2.default.number,\n    string = _propTypes2.default.string,\n    oneOfType = _propTypes2.default.oneOfType;\nvar SplitVertical = (0, _componentTypes.createClass)({\n  displayName: 'SplitVertical',\n  statics: {},\n  _isPrivate: true,\n  propTypes: {\n    className: any,\n    children: node,\n    isResizeable: bool,\n    isExpanded: bool,\n    isAnimated: bool,\n    onResizing: func,\n    onResize: func,\n    collapseShift: number\n  },\n  components: {\n    LeftPane: (0, _componentTypes.createClass)({\n      displayName: 'SplitVertical.LeftPane',\n      statics: {},\n      propTypes: {\n        children: node,\n        width: oneOfType([number, string]),\n        isPrimary: bool\n      },\n      getDefaultProps: function getDefaultProps() {\n        return {\n          isPrimary: false\n        };\n      }\n    }),\n    RightPane: (0, _componentTypes.createClass)({\n      displayName: 'SplitVertical.RightPane',\n      statics: {},\n      propTypes: {\n        children: node,\n        width: oneOfType([number, string]),\n        isPrimary: bool\n      },\n      getDefaultProps: function getDefaultProps() {\n        return {\n          isPrimary: false\n        };\n      }\n    }),\n    Divider: (0, _componentTypes.createClass)({\n      displayName: 'SplitVertical.Divider',\n      statics: {},\n      propTypes: {\n        children: node\n      }\n    })\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      isExpanded: true,\n      isAnimated: false,\n      collapseShift: 0,\n      onResizing: _noop3.default,\n      onResize: _noop3.default,\n      isResizeable: true\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      isAnimated: false,\n      // to ensure first render doesn't show a collapse animation\n      isExpanded: true,\n      collapseAmount: 250\n    };\n  },\n  getPanes: function getPanes() {\n    var children = this.props.children;\n    var _storedRefs = this.storedRefs,\n        leftPaneRef = _storedRefs.leftPane,\n        rightPaneRef = _storedRefs.rightPane;\n    var leftPaneElement = (0, _get3.default)((0, _componentTypes.filterTypes)(children, SplitVertical.LeftPane), 0, _react2.default.createElement(SplitVertical.LeftPane, null));\n    var rightPaneElement = (0, _get3.default)((0, _componentTypes.filterTypes)(children, SplitVertical.RightPane), 0, _react2.default.createElement(SplitVertical.RightPane, null));\n    var primaryElement = void 0,\n        primaryRef = void 0;\n    var secondaryElement = void 0,\n        secondaryRef = void 0;\n\n    if (leftPaneElement.props.isPrimary && !rightPaneElement.props.isPrimary) {\n      primaryElement = leftPaneElement;\n      primaryRef = leftPaneRef;\n      secondaryElement = rightPaneElement;\n      secondaryRef = rightPaneRef;\n    } else {\n      primaryElement = rightPaneElement;\n      primaryRef = rightPaneRef;\n      secondaryElement = leftPaneElement;\n      secondaryRef = leftPaneRef;\n    }\n\n    return {\n      left: leftPaneElement.props,\n      right: rightPaneElement.props,\n      primary: primaryElement.props,\n      primaryRef: primaryRef,\n      secondary: secondaryElement.props,\n      secondaryRef: secondaryRef\n    };\n  },\n  // Style changes to DOM nodes are updated here to shortcut the state -> render cycle for better performance. Also the Style updates in this\n  // function are entirely transient and can be flushed with a props update to `width`.\n  applyDeltaToSecondaryWidth: function applyDeltaToSecondaryWidth(dX, isExpanded, secondaryStartRect, secondaryRef, secondary, right, innerRef, primaryRef) {\n    var collapseShift = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n\n    if (isExpanded) {\n      secondaryRef.style.flexBasis = secondaryStartRect.width + dX * (secondary === right ? -1 : 1) + 'px';\n      return secondaryStartRect.width + dX * (secondary === right ? -1 : 1);\n    } else {\n      var overlapWidth = (secondary === right ? secondaryStartRect.width + dX : secondaryStartRect.width - dX) - collapseShift;\n\n      if (overlapWidth > 0) {\n        this.collapseSecondary(overlapWidth);\n        return secondaryStartRect.width - overlapWidth;\n      } else {\n        this.expandSecondary();\n        secondaryRef.style.flexBasis = (dX + collapseShift) * (secondary === right ? -1 : 1) + 'px';\n        return (dX + collapseShift) * (secondary === right ? -1 : 1);\n      }\n    }\n  },\n  expandSecondary: function expandSecondary() {\n    this.setState({\n      isExpanded: true\n    });\n  },\n  collapseSecondary: function collapseSecondary(collapseAmount) {\n    this.setState({\n      isExpanded: false,\n      collapseAmount: collapseAmount\n    });\n  },\n  disableAnimation: function disableAnimation(innerRef, secondaryRef, primaryRef) {\n    innerRef.style.transitionDuration = '0s';\n    secondaryRef.style.transitionDuration = '0s';\n    primaryRef.style.transitionDuration = '0s';\n  },\n  resetAnimation: function resetAnimation(innerRef, secondaryRef, primaryRef) {\n    innerRef.style.transitionDuration = '';\n    secondaryRef.style.transitionDuration = '';\n    primaryRef.style.transitionDuration = '';\n  },\n  handleDragStart: function handleDragStart() {\n    this.panes = this.getPanes();\n    var _panes = this.panes,\n        secondaryRef = _panes.secondaryRef,\n        primaryRef = _panes.primaryRef;\n    this.secondaryStartRect = secondaryRef.getBoundingClientRect();\n    this.disableAnimation(this.storedRefs.inner, secondaryRef, primaryRef);\n  },\n  handleDrag: function handleDrag(_ref, _ref2) {\n    var dX = _ref.dX;\n    var event = _ref2.event;\n    var _props = this.props,\n        isExpanded = _props.isExpanded,\n        collapseShift = _props.collapseShift,\n        onResizing = _props.onResizing;\n    var _panes2 = this.panes,\n        secondaryRef = _panes2.secondaryRef,\n        secondary = _panes2.secondary,\n        right = _panes2.right,\n        primaryRef = _panes2.primaryRef;\n    onResizing(this.applyDeltaToSecondaryWidth(dX, isExpanded, this.secondaryStartRect, secondaryRef, secondary, right, this.storedRefs.inner, primaryRef, collapseShift), {\n      props: this.props,\n      event: event\n    });\n  },\n  handleDragEnd: function handleDragEnd(_ref3, _ref4) {\n    var dX = _ref3.dX;\n    var event = _ref4.event;\n    var _props2 = this.props,\n        isExpanded = _props2.isExpanded,\n        collapseShift = _props2.collapseShift,\n        onResize = _props2.onResize;\n    var _panes3 = this.panes,\n        secondaryRef = _panes3.secondaryRef,\n        secondary = _panes3.secondary,\n        right = _panes3.right,\n        primaryRef = _panes3.primaryRef;\n    onResize(this.applyDeltaToSecondaryWidth(dX, isExpanded, this.secondaryStartRect, secondaryRef, secondary, right, this.storedRefs.inner, primaryRef, collapseShift), {\n      props: this.props,\n      event: event\n    });\n    this.resetAnimation(this.storedRefs.inner, secondaryRef, primaryRef);\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var isAnimated = nextProps.isAnimated,\n        isExpanded = nextProps.isExpanded,\n        collapseShift = nextProps.collapseShift;\n\n    var _getPanes = this.getPanes(),\n        secondaryRef = _getPanes.secondaryRef;\n\n    if (!isExpanded && ( // check if collapseShift changed or secondary pane collapsed\n    this.props.isExpanded || this.props.collapseShift !== collapseShift)) {\n      // collapse secondary\n      var secondaryRect = secondaryRef.getBoundingClientRect();\n      this.collapseSecondary(secondaryRect.width - collapseShift);\n    } else if (!this.props.isExpanded && isExpanded) {\n      // expand secondary\n      this.expandSecondary();\n    }\n\n    if (this.state.isAnimated !== isAnimated) {\n      this.setState({\n        isAnimated: isAnimated\n      });\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    var _props3 = this.props,\n        isAnimated = _props3.isAnimated,\n        isExpanded = _props3.isExpanded,\n        collapseShift = _props3.collapseShift;\n\n    var _getPanes2 = this.getPanes(),\n        secondaryRef = _getPanes2.secondaryRef;\n\n    if (isExpanded) {\n      // expand secondary\n      this.expandSecondary();\n    } else {\n      // collapse secondary\n      var secondaryRect = secondaryRef.getBoundingClientRect();\n      this.collapseSecondary(secondaryRect.width - collapseShift);\n    }\n\n    if (this.state.isAnimated !== isAnimated) {\n      (0, _defer3.default)(function () {\n        _this.setState({\n          isAnimated: isAnimated\n        });\n      });\n    }\n  },\n  storeRef: function storeRef(name) {\n    var _this2 = this;\n\n    return function (ref) {\n      _this2.storedRefs[name] = ref;\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    this.storedRefs = {};\n  },\n  render: function render() {\n    var _this3 = this;\n\n    var _props4 = this.props,\n        children = _props4.children,\n        className = _props4.className,\n        isResizeable = _props4.isResizeable,\n        passThroughs = _objectWithoutProperties(_props4, ['children', 'className', 'isResizeable']);\n\n    var _state = this.state,\n        isAnimated = _state.isAnimated,\n        isExpanded = _state.isExpanded,\n        collapseAmount = _state.collapseAmount;\n\n    var _getPanes3 = this.getPanes(),\n        leftPaneProps = _getPanes3.left,\n        rightPaneProps = _getPanes3.right,\n        secondary = _getPanes3.secondary;\n\n    var dividerProps = (0, _get3.default)((0, _first3.default)((0, _componentTypes.filterTypes)(children, SplitVertical.Divider)), 'props', {});\n    var from = void 0,\n        to = void 0;\n\n    if (!isExpanded) {\n      from = {\n        slideAmount: 0\n      };\n      to = {\n        slideAmount: collapseAmount\n      };\n    } else {\n      from = {\n        slideAmount: 0\n      };\n      to = {\n        slideAmount: 0\n      };\n    }\n\n    var isRightSecondary = rightPaneProps === secondary;\n    return _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(passThroughs, SplitVertical), {\n      className: cx('&', {\n        '&-is-expanded': isExpanded,\n        '&-is-animated': isAnimated\n      }, className),\n      style: _extends({\n        overflow: 'hidden'\n      }, passThroughs.style)\n    }), _react2.default.createElement(_reactMotion.Motion, {\n      defaultStyle: from,\n      style: isAnimated ? (0, _mapValues3.default)(to, function (val) {\n        return (0, _reactMotion.spring)(val, _motionSpring.QUICK_SLIDE_MOTION);\n      }) : to\n    }, function (tween) {\n      return _react2.default.createElement('div', {\n        className: cx('&-inner'),\n        ref: _this3.storeRef('inner'),\n        style: {\n          display: 'flex',\n          transform: 'translateX(' + (isRightSecondary ? 1 : -1) * Math.round(tween.slideAmount) + 'px)'\n        }\n      }, _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(leftPaneProps, SplitVertical.LeftPane), {\n        className: cx('&-LeftPane', {\n          '&-is-secondary': leftPaneProps === secondary\n        }, leftPaneProps.className),\n        style: _extends({\n          flexGrow: isRightSecondary ? 1 : 0,\n          flexShrink: isRightSecondary ? 1 : 0,\n          flexBasis: (0, _isNil3.default)(leftPaneProps.width) ? leftPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : leftPaneProps.width,\n          marginLeft: isRightSecondary ? -Math.round(tween.slideAmount) : null,\n          overflow: 'auto'\n        }, leftPaneProps.style),\n        ref: _this3.storeRef('leftPane')\n      }), leftPaneProps.children), isResizeable ? _react2.default.createElement(_DragCaptureZone2.default, _extends({}, (0, _componentTypes.omitProps)(dividerProps, SplitVertical.Divider, [], false), {\n        className: cx('&-Divider', '&-Divider-is-resizeable', dividerProps.className),\n        onDragStart: _this3.handleDragStart,\n        onDrag: _this3.handleDrag,\n        onDragEnd: _this3.handleDragEnd,\n        style: _extends({\n          width: '6px',\n          boxSizing: 'border-box'\n        }, dividerProps.style)\n      }), dividerProps.children || ' ') : _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(dividerProps, SplitVertical.Divider), {\n        className: cx('&-Divider', dividerProps.className)\n      }), dividerProps.children || ' '), _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(rightPaneProps, SplitVertical.RightPane), {\n        className: cx('&-RightPane', {\n          '&-is-secondary': rightPaneProps === secondary\n        }, rightPaneProps.className),\n        style: _extends({\n          flexGrow: !isRightSecondary ? 1 : 0,\n          flexShrink: !isRightSecondary ? 1 : 0,\n          flexBasis: (0, _isNil3.default)(rightPaneProps.width) ? rightPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : rightPaneProps.width,\n          marginRight: isRightSecondary ? null : -Math.round(tween.slideAmount),\n          overflow: 'auto'\n        }, rightPaneProps.style),\n        ref: _this3.storeRef('rightPane')\n      }), rightPaneProps.children));\n    }));\n  }\n});\nexports.default = SplitVertical;","map":null,"metadata":{},"sourceType":"script"}