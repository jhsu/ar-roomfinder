{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _last2 = require('lodash/last');\n\nvar _last3 = _interopRequireDefault(_last2);\n\nvar _mergeWith2 = require('lodash/mergeWith');\n\nvar _mergeWith3 = _interopRequireDefault(_mergeWith2);\n\nvar _memoize2 = require('lodash/memoize');\n\nvar _memoize3 = _interopRequireDefault(_memoize2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _reduce2 = require('lodash/reduce');\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _dropRight2 = require('lodash/dropRight');\n\nvar _dropRight3 = _interopRequireDefault(_dropRight2);\n\nvar _slice2 = require('lodash/slice');\n\nvar _slice3 = _interopRequireDefault(_slice2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _identity2 = require('lodash/identity');\n\nvar _identity3 = _interopRequireDefault(_identity2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.thunk = thunk;\nexports.getReduxPrimitives = getReduxPrimitives;\nexports.cleanArgs = cleanArgs;\n\nvar _reselect = require('reselect');\n\nvar _stateManagement = require('./state-management.js');\n\nvar _logger = require('./logger.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n/**\n * thunk\n *\n * Marks a function on the reducer tree as a thunk action creator so it doesn't\n * get incorporated into the redux reducer\n *\n * @return {function} with `isThunk` set to `true`\n */\n\n\nfunction thunk(fn) {\n  fn.isThunk = true;\n  return fn;\n}\n/**\n * getReduxPrimitives\n *\n * Creates a redux reducer and connectors (inputs to redux-react's `connect`)\n *\n * @param {Object} param\n * @param {Object} param.initialState - the initial state object that the reducer will return\n * @param {Object} param.reducers - a tree of lucid reducers\n * @param {string[]} param.rootPath - array of strings representing the path to local state in global state\n * @param {function} param.rootSelector - a top-level selector which takes as input state that has run through every selector in param.selectors\n * @param {Object} param.selectors - a tree of lucid selectors\n * @return {Object} redux reducer and connectors\n */\n\n\nfunction getReduxPrimitives(_ref) {\n  var initialState = _ref.initialState,\n      reducers = _ref.reducers,\n      _ref$rootPath = _ref.rootPath,\n      rootPath = _ref$rootPath === undefined ? [] : _ref$rootPath,\n      _ref$rootSelector = _ref.rootSelector,\n      rootSelector = _ref$rootSelector === undefined ? _identity3.default : _ref$rootSelector,\n      selectors = _ref.selectors;\n  /* istanbul ignore if */\n\n  if (_logger.isDevMode && (0, _isEmpty3.default)(rootPath)) {\n    _logger.logger.warn('`getReduxPrimitives` warning:\\n`rootPath` is empty');\n  }\n  /* istanbul ignore if */\n\n\n  if (_logger.isDevMode && !initialState) {\n    _logger.logger.warn('`getReduxPrimitives` warning:\\nMissing `initialState` for component at `rootPath` ' + ((0, _isArray3.default)(rootPath) ? rootPath.join(',') : rootPath) + '\\nComponents should have an `initialState` property or a `getDefaultProps` defined.\\n');\n  } // we need this in scope so actionCreators can refer to it\n\n\n  var dispatchTree = void 0;\n  var reducer = createReduxReducer(reducers, initialState, rootPath);\n  var selector = selectors ? (0, _stateManagement.reduceSelectors)(selectors) : _identity3.default;\n\n  var rootPathSelector = function rootPathSelector(state) {\n    return (0, _isEmpty3.default)(rootPath) ? state : (0, _get3.default)(state, rootPath);\n  };\n\n  var mapStateToProps = (0, _reselect.createSelector)([rootPathSelector], function (rootState) {\n    return rootSelector(selector(rootState));\n  });\n\n  var mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return getDispatchTree(reducers, rootPath, dispatch);\n  };\n\n  var devModeMapStateToProps = function devModeMapStateToProps(rootState) {\n    /* istanbul ignore if */\n    if (_logger.isDevMode && !(0, _has3.default)(rootState, rootPath)) {\n      _logger.logger.warn('`getReduxPrimitives` warning:\\n`rootPath` ' + rootPath + ' does not exist in the redux store.\\nMake sure your `rootPath` is correct.\\n');\n    }\n\n    return mapStateToProps(rootState);\n  };\n\n  return {\n    reducer: reducer,\n    connectors: [_logger.isDevMode ? devModeMapStateToProps : mapStateToProps, mapDispatchToProps, mergeProps]\n  };\n  /**\n   * createActionCreator\n   *\n   * @param {function} node - a node in the the reducer tree, either a reducer or a thunk\n   * @param {string[]} path - the path to the reducer in the reducer tree\n   * @param {string[]} rootPath - array of strings representing the path to local state in global state\n   * @return {function} action creator that returns either an action or a thunk\n   */\n\n  function createActionCreator(node, rootPath, path) {\n    if (node.isThunk) {\n      return function thunk() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return function thunkInner(dispatch, getState) {\n          var pathToLocalDispatchTree = (0, _slice3.default)(path, rootPath.length, -1);\n          var pathToLocalState = (0, _dropRight3.default)(path);\n          var localDispatchTree = (0, _isEmpty3.default)(pathToLocalDispatchTree) ? dispatchTree : (0, _get3.default)(dispatchTree, pathToLocalDispatchTree);\n          var getLocalState = (0, _isEmpty3.default)(pathToLocalState) ? getState : function () {\n            return (0, _get3.default)(getState(), pathToLocalState);\n          };\n\n          for (var _len2 = arguments.length, rest = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n            rest[_key2 - 2] = arguments[_key2];\n          }\n\n          return node.apply(undefined, args).apply(undefined, [localDispatchTree, getLocalState, dispatch, getState].concat(rest));\n        };\n      };\n    }\n\n    return function actionCreator() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var _ref2 = _logger.isDevMode ? cleanArgs(args) : args,\n          _ref3 = _toArray(_ref2),\n          payload = _ref3[0],\n          meta = _ref3.slice(1);\n\n      return {\n        type: path.join('.'),\n        payload: payload,\n        meta: meta\n      };\n    };\n  }\n  /**\n   * createActionCreatorTree\n   *\n   * Walks the reducer tree and generates a tree of action creators that correspond to each reducer\n   * @param {Object} reducers - a tree of lucid reducers\n   * @param {string[]} rootPath - array of strings representing the path to local state in global state\n   * @returns {Object} action creator tree\n   */\n\n\n  function createActionCreatorTree(reducers, rootPath) {\n    var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : rootPath;\n    return (0, _reduce3.default)(reducers, function (memo, node, key) {\n      var currentPath = path.concat(key);\n      return _extends({}, memo, _defineProperty({}, key, (0, _isFunction3.default)(node) ? createActionCreator(node, rootPath, currentPath) : createActionCreatorTree(node, rootPath, currentPath)));\n    }, {});\n  }\n  /**\n   * getDispatchTree\n   *\n   * Walks the reducer tree and generates an action creator tree, then binds dispatch to each node\n   * @param {Object} reducers - a tree of lucid reducers\n   * @param {string[]} rootPath - array of strings representing the path to local state in global state\n   * @param {function} dispatch - the redux store's `dispatch` function\n   */\n\n\n  function getDispatchTree(reducers, rootPath, dispatch) {\n    var actionCreatorTree = createActionCreatorTree(reducers, rootPath);\n    dispatchTree = bindActionCreatorTree(actionCreatorTree, dispatch);\n    /* istanbul ignore if */\n\n    if (_logger.isDevMode) {\n      window.lucidReduxUtil = window.lucidReduxUtil || {};\n      window.lucidReduxUtil[rootPath] = {\n        actionCreatorTree: actionCreatorTree,\n        dispatchTree: dispatchTree\n      };\n    }\n\n    return dispatchTree;\n  }\n}\n/**\n * createReduxReducerTree\n *\n * Walks the reducer tree and generates a tree of redux reducers, converting the\n * signature from `(state, payload) => state` to `(state, action) => state`\n * @param {Object} reducers - a tree of lucid reducers\n * @param {string[]} path - array of strings representing the path to the reducer\n * @return {Object} redux reducer tree\n */\n\n\nfunction createReduxReducerTree(reducers) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return (0, _reduce3.default)(reducers, function (memo, node, key) {\n    // filter out thunks from the reducer tree\n    if (node.isThunk) {\n      return memo;\n    }\n\n    var currentPath = path.concat(key);\n    return _extends({}, memo, _defineProperty({}, key, (0, _isFunction3.default)(node) ? function reduxReducer(state, action) {\n      var type = action.type,\n          payload = action.payload,\n          _action$meta = action.meta,\n          meta = _action$meta === undefined ? [] : _action$meta;\n\n      if ((0, _isUndefined3.default)(state) || type !== currentPath.join('.')) {\n        return state;\n      }\n\n      return node.apply(undefined, [state, payload].concat(_toConsumableArray(meta)));\n    } : createReduxReducerTree(node, currentPath)));\n  }, {});\n}\n/**\n * createReducerFromReducerTree\n *\n * Returns a function that calls every reducer in the reducer tree with the reducer's local state and action\n * @param {Object} reduxReducerTree - tree of redux reducers with signature `(state, action) => state`\n * @param {Object} initialState - the initial state object that the reducer will return\n * @return {function} the redux reducer\n */\n\n\nfunction createReducerFromReducerTree(reduxReducerTree, initialState) {\n  return function reduxReducer(state, action) {\n    if ((0, _isUndefined3.default)(state)) {\n      return initialState;\n    }\n\n    return (0, _reduce3.default)(reduxReducerTree, function (state, node, key) {\n      return _extends({}, state, (0, _isFunction3.default)(node) ? node(state, action) : _defineProperty({}, key, createReducerFromReducerTree(node)(state[key], action)));\n    }, state);\n  };\n}\n/**\n * createReduxReducer\n *\n * Generates a redux reducer from a tree of lucid reducers\n * @param {Object} reducers - a tree of lucid reducers\n * @param {Object} initialState - the initial state object that the reducer will return\n * @param {string[]} rootPath - array of strings representing the path to part of global state this reducer applies to\n * @return {function} the redux reducer\n */\n\n\nfunction createReduxReducer(reducers, initialState, rootPath) {\n  var reducerTree = createReduxReducerTree(reducers, rootPath);\n  return createReducerFromReducerTree(reducerTree, initialState);\n}\n/**\n * bindActionCreatorTree\n *\n * Binds redux store.dispatch to actionCreators in a tree\n * @param {Object} actionCreatorTree - a tree of redux action creator functions\n * @param {function} dispatch - the redux store's `dispatch` function\n * @param {string[]} path - array of strings representing the path to the action creator\n */\n\n\nfunction bindActionCreatorTree(actionCreatorTree, dispatch) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return (0, _reduce3.default)(actionCreatorTree, function (memo, node, key) {\n    return _extends({}, memo, _defineProperty({}, key, (0, _isFunction3.default)(node) ? function boundActionCreator() {\n      var action = actionCreatorTree[key].apply(actionCreatorTree, arguments);\n      return dispatch(action);\n    } : bindActionCreatorTree(node, dispatch, path.concat(key))));\n  }, {});\n}\n/**\n * mergeProps\n *\n * Merges state, dispatchTree, and ownProps into a single props object\n * @param {Object} state\n * @param {Object} dispatchTree\n * @param {Object} ownProps\n * @return {Object}\n */\n\n\nvar mergeProps = (0, _memoize3.default)(function (state, dispatchTree, ownProps) {\n  return (0, _mergeWith3.default)({}, state, dispatchTree, ownProps, _stateManagement.safeMerge);\n});\n\nfunction cleanArgs(args) {\n  return (0, _has3.default)((0, _last3.default)(args), 'event') ? (0, _dropRight3.default)(args) : args;\n}","map":null,"metadata":{},"sourceType":"script"}