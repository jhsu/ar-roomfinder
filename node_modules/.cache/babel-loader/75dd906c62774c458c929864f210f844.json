{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-Portal');\n\nvar any = _propTypes2.default.any,\n    node = _propTypes2.default.node,\n    string = _propTypes2.default.string; // This component passes the `context` prop with { store } from react-redux\n// Provider on to the childContext\n\nvar WithStoreContext = (0, _componentTypes.createClass)({\n  displayName: 'WithContext',\n  propTypes: {\n    context: any,\n    children: node\n  },\n  childContextTypes: {\n    store: any\n  },\n  getChildContext: function getChildContext() {\n    return this.props.context;\n  },\n  render: function render() {\n    return this.props.children;\n  }\n});\nvar Portal = (0, _componentTypes.createClass)({\n  displayName: 'Portal',\n  statics: {},\n  propTypes: {\n    children: node,\n    className: any,\n    portalId: string.isRequired\n  },\n  contextTypes: {\n    store: any // access `store` from the context object\n\n  },\n  render: function render() {\n    return null;\n  },\n  componentDidMount: function componentDidMount() {\n    var portalId = this.props.portalId;\n    var portalElement = window.document.getElementById(portalId);\n\n    if (!portalElement) {\n      portalElement = window.document.createElement('div');\n      portalElement.id = portalId;\n      window.document.body.appendChild(portalElement);\n    }\n\n    this.portalElement = portalElement;\n    this.componentDidUpdate();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    _reactDom2.default.unmountComponentAtNode(this.portalElement);\n\n    window.document.body.removeChild(this.portalElement);\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    _reactDom2.default.render(_react2.default.createElement(WithStoreContext, {\n      context: this.context\n    }, _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(this.props, Portal), {\n      className: cx('&', this.props.className)\n    }), this.props.children)), this.portalElement);\n  }\n});\nexports.default = Portal;","map":null,"metadata":{},"sourceType":"script"}