{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _debounce2 = require('lodash/debounce');\n\nvar _debounce3 = _interopRequireDefault(_debounce2);\n\nvar _noop2 = require('lodash/noop');\n\nvar _noop3 = _interopRequireDefault(_noop2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _TextField = require('./TextField.reducers');\n\nvar _TextField2 = _interopRequireDefault(_TextField);\n\nvar _keyCode = require('../../constants/key-code');\n\nvar KEYCODE = _interopRequireWildcard(_keyCode);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-TextField');\n\nvar bool = _propTypes2.default.bool,\n    string = _propTypes2.default.string,\n    func = _propTypes2.default.func,\n    number = _propTypes2.default.number,\n    object = _propTypes2.default.object,\n    oneOfType = _propTypes2.default.oneOfType;\nvar TextField = (0, _componentTypes.createClass)({\n  displayName: 'TextField',\n  statics: {},\n  reducers: _TextField2.default,\n  propTypes: {\n    style: object,\n    isMultiLine: bool,\n    isDisabled: bool,\n    rows: number,\n    className: string,\n    onChange: func,\n    onBlur: func,\n    onChangeDebounced: func,\n    onKeyDown: func,\n    onSubmit: func,\n    value: oneOfType([number, string]),\n    debounceLevel: number,\n    lazyLevel: number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      style: null,\n      isDisabled: false,\n      isMultiLine: false,\n      onBlur: _noop3.default,\n      onChange: _noop3.default,\n      onChangeDebounced: _noop3.default,\n      onSubmit: _noop3.default,\n      rows: 5,\n      debounceLevel: 500,\n      lazyLevel: 1000,\n      value: ''\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      value: this.props.value\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    var _this = this; // Because we want the debounceLevel to be configurable, we can't put the\n    // debounced handler directly on the react class, so we set it up right\n    // before mount\n\n\n    this._isMounted = true;\n    this._handleChangeDebounced = (0, _debounce3.default)(function () {\n      var _props;\n\n      (_props = _this.props).onChangeDebounced.apply(_props, arguments);\n    }, this.props.debounceLevel);\n    this._releaseHold = (0, _debounce3.default)(function () {\n      if (!_this._isMounted) {\n        return;\n      }\n\n      _this.setState({\n        isHolding: false\n      });\n    }, this.props.lazyLevel);\n    this._updateWhenReady = (0, _debounce3.default)(function (newValue) {\n      if (!_this._isMounted) {\n        return;\n      }\n\n      if (_this.state.isHolding) {\n        _this._updateWhenReady(newValue);\n      } else if (newValue !== _this.state.value) {\n        _this.setState({\n          value: newValue\n        });\n      }\n    }, this.props.lazyLevel);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this._isMounted = false;\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    // Allow consumer to optionally control state\n    if ((0, _has3.default)(nextProps, 'value')) {\n      if (this.state.isHolding) {\n        this._updateWhenReady(nextProps.value);\n      } else {\n        this.setState({\n          value: nextProps.value\n        });\n      }\n    }\n  },\n  handleChange: function handleChange(event) {\n    var _props2 = this.props,\n        onChange = _props2.onChange,\n        onChangeDebounced = _props2.onChangeDebounced;\n    var value = (0, _get3.default)(event, 'target.value', '');\n    this.setState({\n      value: value,\n      isHolding: true\n    });\n\n    this._releaseHold();\n\n    onChange(value, {\n      event: event,\n      props: this.props\n    }); // Also call the debounced handler in case the user wants debounced change\n    // events.\n\n    if (onChangeDebounced !== _noop3.default) {\n      event.persist(); // https://facebook.github.io/react/docs/events.html#event-pooling\n\n      this._handleChangeDebounced(value, {\n        event: event,\n        props: this.props\n      });\n    }\n  },\n  handleBlur: function handleBlur(event) {\n    var _props3 = this.props,\n        onBlur = _props3.onBlur,\n        onChangeDebounced = _props3.onChangeDebounced;\n    var value = (0, _get3.default)(event, 'target.value', '');\n\n    if (onChangeDebounced !== _noop3.default) {\n      this._handleChangeDebounced.flush();\n    }\n\n    onBlur(value, {\n      event: event,\n      props: this.props\n    });\n  },\n  handleKeyDown: function handleKeyDown(event) {\n    var props = this.props,\n        _props4 = this.props,\n        onSubmit = _props4.onSubmit,\n        onKeyDown = _props4.onKeyDown,\n        onChangeDebounced = _props4.onChangeDebounced;\n    var value = (0, _get3.default)(event, 'target.value', ''); // If the consumer passed an onKeyDown, we call it\n\n    if (onKeyDown) {\n      onKeyDown({\n        event: event,\n        props: props\n      });\n    }\n\n    if (event.keyCode === KEYCODE.Enter) {\n      if (onChangeDebounced !== _noop3.default) {\n        this._handleChangeDebounced.flush();\n      }\n\n      onSubmit(value, {\n        event: event,\n        props: this.props\n      });\n    }\n  },\n  focus: function focus() {\n    /* istanbul ignore next */\n    this.refs.nativeElement.focus();\n  },\n  render: function render() {\n    var _this2 = this;\n\n    var _props5 = this.props,\n        className = _props5.className,\n        isDisabled = _props5.isDisabled,\n        isMultiLine = _props5.isMultiLine,\n        rows = _props5.rows,\n        style = _props5.style,\n        passThroughs = _objectWithoutProperties(_props5, ['className', 'isDisabled', 'isMultiLine', 'rows', 'style']);\n\n    var value = this.state.value;\n\n    var finalProps = _extends({}, (0, _componentTypes.omitProps)(passThroughs, TextField, ['children']), {\n      className: cx('&', {\n        '&-is-disabled': isDisabled,\n        '&-is-multi-line': isMultiLine,\n        '&-is-single-line': !isMultiLine\n      }, className),\n      disabled: isDisabled,\n      onChange: this.handleChange,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      style: style,\n      rows: rows,\n      value: value,\n      ref: function ref(_ref) {\n        return _this2.refs = {\n          nativeElement: _ref\n        };\n      }\n    });\n\n    return isMultiLine ? _react2.default.createElement('textarea', finalProps) : _react2.default.createElement('input', _extends({\n      type: 'text'\n    }, finalProps));\n  }\n});\nexports.default = TextField;","map":null,"metadata":{},"sourceType":"script"}