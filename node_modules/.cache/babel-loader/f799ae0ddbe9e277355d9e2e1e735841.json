{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _times2 = require('lodash/times');\n\nvar _times3 = _interopRequireDefault(_times2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nexports.getAbsoluteBoundingClientRect = getAbsoluteBoundingClientRect;\nexports.scrollParentTo = scrollParentTo;\nexports.dispatchDOMEvent = dispatchDOMEvent;\nexports.sharesAncestor = sharesAncestor;\nexports.shiftChildren = shiftChildren;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getAbsoluteBoundingClientRect(domNode) {\n  var elementRect = domNode.getBoundingClientRect();\n  return {\n    bottom: elementRect.bottom + window.pageYOffset,\n    top: elementRect.top + window.pageYOffset,\n    left: elementRect.left + window.pageXOffset,\n    right: elementRect.right + window.pageXOffset,\n    height: elementRect.height,\n    width: elementRect.width\n  };\n}\n\nfunction scrollParentTo(domNode) {\n  var additionalOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (domNode) {\n    var parentNode = domNode.parentNode;\n\n    if (parentNode.scrollTop > domNode.offsetTop - additionalOffset) {\n      // if the top of the node is above the scroll line,\n      // align to top\n      parentNode.scrollTop = domNode.offsetTop - additionalOffset;\n    } else if (parentNode.scrollTop + parentNode.clientHeight < domNode.offsetTop + domNode.offsetHeight) {\n      // else if the bottom of the node is below the fold,\n      // align to bottom\n      parentNode.scrollTop = domNode.offsetHeight - (parentNode.clientHeight - domNode.offsetTop);\n    } // else don't need to align anything\n\n  }\n}\n\nfunction dispatchDOMEvent(node, eventName, assignedEventProps) {\n  var event = document.createEvent('Event');\n  event.initEvent(eventName, true, true);\n  node.dispatchEvent((0, _assign3.default)(event, assignedEventProps));\n  return event;\n}\n/**\n * sharesAncestor\n *\n * Recursively looks at `node` and its parents for `nodeName` and makes\n * sure it contains `siblingNode`.\n *\n * @param {element} node - dom node to check if any of its ancestors are a `<label>`\n * @param {element} siblingNode - dom node to see if it shares an ancestor\n * @param {string} nodeName - dom node name, should be uppercased, e.g. `LABEL` or `SPAN`\n * @returns {boolean}\n */\n\n\nfunction sharesAncestor(node, siblingNode, nodeName) {\n  var currentNodeName = (0, _get3.default)(node, 'nodeName');\n  var parentNode = (0, _get3.default)(node, 'parentNode');\n\n  if (currentNodeName === nodeName) {\n    return node.contains(siblingNode);\n  }\n\n  if (parentNode) {\n    return sharesAncestor(parentNode, siblingNode, nodeName);\n  }\n\n  return false;\n}\n\nfunction shiftChildren(parent) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  if (n < 0) {\n    (0, _times3.default)(Math.abs(n), function () {\n      parent.appendChild(parent.children[0]);\n    });\n  } else if (n > 0) {\n    (0, _times3.default)(n, function () {\n      parent.insertBefore(parent.children[parent.children.length - 1], parent.children[0]);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"script"}