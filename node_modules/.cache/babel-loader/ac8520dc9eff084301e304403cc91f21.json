{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _escapeRegExp2 = require('lodash/escapeRegExp');\n\nvar _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _isRegExp2 = require('lodash/isRegExp');\n\nvar _isRegExp3 = _interopRequireDefault(_isRegExp2);\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _textManipulation = require('../../util/text-manipulation');\n\nvar _styleHelpers = require('../../util/style-helpers.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-Underline');\n\nvar node = _propTypes2.default.node,\n    string = _propTypes2.default.string,\n    instanceOf = _propTypes2.default.instanceOf,\n    oneOfType = _propTypes2.default.oneOfType;\nvar matchAllRegexp = /^.*$/;\n\nvar Underline = function Underline(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      match = _ref.match,\n      passThroughs = _objectWithoutProperties(_ref, ['className', 'children', 'match']);\n\n  if (!(0, _isRegExp3.default)(match)) {\n    if ((0, _isString3.default)(match)) {\n      match = new RegExp((0, _escapeRegExp3.default)(match), 'i');\n    } else {\n      match = matchAllRegexp;\n    }\n  }\n\n  if (!(0, _isString3.default)(children)) {\n    return _react2.default.createElement('span', _extends({\n      className: cx('&', className)\n    }, passThroughs), _react2.default.createElement('span', {\n      style: match === matchAllRegexp ? {\n        textDecoration: 'underline'\n      } : null\n    }, children));\n  }\n\n  var _partitionText = (0, _textManipulation.partitionText)(children, match),\n      _partitionText2 = _slicedToArray(_partitionText, 3),\n      pre = _partitionText2[0],\n      matchText = _partitionText2[1],\n      post = _partitionText2[2];\n\n  return _react2.default.createElement('span', _extends({\n    className: cx('&', className)\n  }, passThroughs), [pre && _react2.default.createElement('span', {\n    key: 'pre'\n  }, pre), matchText && _react2.default.createElement('span', {\n    key: 'match',\n    style: {\n      textDecoration: 'underline'\n    }\n  }, matchText), post && _react2.default.createElement('span', {\n    key: 'post'\n  }, post)]);\n};\n\nUnderline.displayName = 'Underline';\nUnderline.peek = {\n  description: '\\n\\t\\tUnderlines a portion of text that matches a given pattern\\n\\t',\n  categories: ['controls', 'selectors']\n};\nUnderline.propTypes = {\n  className: string,\n  children: node,\n  match: oneOfType([string, instanceOf(RegExp)])\n};\nexports.default = Underline;","map":null,"metadata":{},"sourceType":"script"}