{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lucidClassNames = exports.NAMESPACE = undefined;\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nexports.bindClassNames = bindClassNames;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * bindClassNames\n *\n * Returns a version of the `classnames` functions where `&` is bound to a given\n * value. The returned functions can be further bound to more specific values for\n * `&` which allows your bound classnames to look closer to style selector.\n *\n * Examples:\n *   bindClassNames('lucid')('&-Button') === 'lucid-Button'\n *   bindClassNames('lucid').bind('&-Button')('&-active') === 'lucid-Button-active'\n */\n\n\nfunction bindClassNames() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /&/g;\n\n  function cx() {\n    return (0, _map3.default)(_classnames2.default.apply(undefined, arguments).split(' '), function (className) {\n      return className.replace(variable, value);\n    }).join(' ');\n  }\n\n  return (0, _assign3.default)(cx, {\n    bind: function bind() {\n      var nextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : value;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return bindClassNames.apply(undefined, [nextValue.replace(variable, value)].concat(_toConsumableArray(args)));\n    }\n  });\n}\n\nvar NAMESPACE = exports.NAMESPACE = 'lucid';\n/**\n * Exports a lucid-bound version of classnames, which can be make more specific\n * to a component.\n *\n * Example:\n *   const cx = lucidClassNames.bind('&-Button')\n *\n *   cx('&',{\n *     '&-active': true\n *   }, ['custom-classname']) === 'lucid-Button lucid-Button-active custom-classname'\n */\n\nvar lucidClassNames = exports.lucidClassNames = bindClassNames(NAMESPACE);","map":null,"metadata":{},"sourceType":"script"}