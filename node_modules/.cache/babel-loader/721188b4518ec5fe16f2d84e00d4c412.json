{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchableSelectDumb = undefined;\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _isNumber2 = require('lodash/isNumber');\n\nvar _isNumber3 = _interopRequireDefault(_isNumber2);\n\nvar _first2 = require('lodash/first');\n\nvar _first3 = _interopRequireDefault(_first2);\n\nvar _filter2 = require('lodash/filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _escapeRegExp2 = require('lodash/escapeRegExp');\n\nvar _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);\n\nvar _find2 = require('lodash/find');\n\nvar _find3 = _interopRequireDefault(_find2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('react-peek/prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _componentTypes = require('../../util/component-types');\n\nvar _styleHelpers = require('../../util/style-helpers');\n\nvar _textManipulation = require('../../util/text-manipulation');\n\nvar _stateManagement = require('../../util/state-management');\n\nvar _SearchableSelect = require('./SearchableSelect.reducers');\n\nvar reducers = _interopRequireWildcard(_SearchableSelect);\n\nvar _CaretIcon = require('../Icon/CaretIcon/CaretIcon');\n\nvar _CaretIcon2 = _interopRequireDefault(_CaretIcon);\n\nvar _DropMenu = require('../DropMenu/DropMenu');\n\nvar _LoadingIcon = require('../Icon/LoadingIcon/LoadingIcon');\n\nvar _LoadingIcon2 = _interopRequireDefault(_LoadingIcon);\n\nvar _SearchField = require('../SearchField/SearchField');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar cx = _styleHelpers.lucidClassNames.bind('&-SearchableSelect');\n\nvar any = _propTypes2.default.any,\n    bool = _propTypes2.default.bool,\n    func = _propTypes2.default.func,\n    node = _propTypes2.default.node,\n    number = _propTypes2.default.number,\n    object = _propTypes2.default.object,\n    shape = _propTypes2.default.shape,\n    string = _propTypes2.default.string,\n    oneOfType = _propTypes2.default.oneOfType;\nvar SearchableSelect = (0, _componentTypes.createClass)({\n  displayName: 'SearchableSelect',\n  statics: {},\n  reducers: reducers,\n  components: {\n    Placeholder: (0, _componentTypes.createClass)({\n      displayName: 'SearchableSelect.Placeholder',\n      statics: {},\n      propName: 'Placeholder'\n    }),\n    Option: (0, _componentTypes.createClass)({\n      displayName: 'SearchableSelect.Option',\n      statics: {},\n      propName: 'Option',\n      propTypes: _extends({\n        Selected: any,\n        filterText: string\n      }, _DropMenu.DropMenuDumb.Option.propTypes),\n      components: {\n        Selected: (0, _componentTypes.createClass)({\n          displayName: 'SearchableSelect.Option.Selected',\n          statics: {},\n          propName: 'Selected'\n        })\n      }\n    }),\n    OptionGroup: (0, _componentTypes.createClass)({\n      displayName: 'SearchableSelect.OptionGroup',\n      statics: {},\n      propName: 'OptionGroup',\n      propTypes: _DropMenu.DropMenuDumb.OptionGroup.propTypes\n    }),\n    SearchField: _SearchField.SearchFieldDumb\n  },\n  propTypes: {\n    children: node,\n    className: string,\n    style: object,\n    hasReset: bool,\n    isDisabled: bool,\n    isLoading: bool,\n    isSelectionHighlighted: bool,\n    maxMenuHeight: oneOfType([number, string]),\n    onSearch: func,\n    onSelect: func,\n    optionFilter: func,\n    searchText: string,\n    selectedIndex: number,\n    DropMenu: shape(_DropMenu.DropMenuDumb.propTypes),\n    Placeholder: any,\n    Option: any,\n    OptionGroup: any\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      hasReset: true,\n      isSelectionHighlighted: true,\n      isDisabled: false,\n      isLoading: false,\n      optionFilter: _textManipulation.propsSearch,\n      searchText: '',\n      selectedIndex: null,\n      DropMenu: _DropMenu.DropMenuDumb.getDefaultProps()\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      optionGroups: [],\n      flattenedOptionsData: [],\n      ungroupedOptionData: [],\n      optionGroupDataLookup: {}\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    // preprocess the options data before rendering\n    this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(this.props, SearchableSelect));\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    // only preprocess options data when it changes (via new props) - better performance than doing this each render\n    this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(nextProps, SearchableSelect));\n  },\n  handleSearch: function handleSearch(searchText) {\n    var _props = this.props,\n        onSearch = _props.onSearch,\n        optionFilter = _props.optionFilter;\n    var flattenedOptionsData = this.state.flattenedOptionsData;\n    var firstVisibleIndex = (0, _get3.default)((0, _find3.default)(flattenedOptionsData, function (_ref) {\n      var optionProps = _ref.optionProps;\n      return optionFilter(searchText, optionProps);\n    }), 'optionIndex');\n    onSearch(searchText, firstVisibleIndex);\n  },\n  renderUnderlinedChildren: function renderUnderlinedChildren(childText, searchText) {\n    var _partitionText = (0, _textManipulation.partitionText)(childText, new RegExp((0, _escapeRegExp3.default)(searchText), 'i'), searchText.length),\n        _partitionText2 = _slicedToArray(_partitionText, 3),\n        pre = _partitionText2[0],\n        match = _partitionText2[1],\n        post = _partitionText2[2];\n\n    return [pre && _react2.default.createElement('span', {\n      key: 'pre',\n      className: cx('&-Option-underline-pre')\n    }, pre), match && _react2.default.createElement('span', {\n      key: 'match',\n      className: cx('&-Option-underline-match')\n    }, match), post && _react2.default.createElement('span', {\n      key: 'post',\n      className: cx('&-Option-underline-post')\n    }, post)];\n  },\n  renderOption: function renderOption(optionProps, optionIndex) {\n    var _props2 = this.props,\n        isLoading = _props2.isLoading,\n        optionFilter = _props2.optionFilter,\n        searchText = _props2.searchText;\n\n    if (searchText) {\n      return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, _extends({\n        isDisabled: isLoading\n      }, (0, _omit3.default)(optionProps, ['children', 'Selected', 'filterText']), {\n        isHidden: !optionFilter(searchText, optionProps),\n        key: 'SearchableSelectOption' + optionIndex\n      }), (0, _isString3.default)(optionProps.children) ? this.renderUnderlinedChildren(optionProps.children, searchText) : (0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children, {\n        searchText: searchText\n      }) : optionProps.children);\n    }\n\n    return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, _extends({\n      key: 'SearchableSelectOption' + optionIndex\n    }, (0, _omit3.default)(optionProps, ['children', 'Selected', 'filterText']), {\n      isDisabled: optionProps.isDisabled || isLoading\n    }), (0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children, {\n      searchText: searchText\n    }) : optionProps.children);\n  },\n  renderOptions: function renderOptions() {\n    var _this = this;\n\n    var searchText = this.props.searchText;\n    var _state = this.state,\n        optionGroups = _state.optionGroups,\n        optionGroupDataLookup = _state.optionGroupDataLookup,\n        ungroupedOptionData = _state.ungroupedOptionData; // for each option group passed in, render a DropMenu.OptionGroup, any\n    // label will be included in it's children, render each option inside the\n    // group\n\n    var options = (0, _map3.default)(optionGroups, function (optionGroupProps, optionGroupIndex) {\n      var childOptions = (0, _map3.default)((0, _get3.default)(optionGroupDataLookup, optionGroupIndex), function (_ref2) {\n        var optionProps = _ref2.optionProps,\n            optionIndex = _ref2.optionIndex;\n        return _this.renderOption(optionProps, optionIndex);\n      });\n      var visibleChildrenCount = (0, _filter3.default)(childOptions, function (option) {\n        return !option.props.isHidden;\n      }).length;\n      return _react2.default.createElement(_DropMenu.DropMenuDumb.OptionGroup, _extends({\n        isHidden: visibleChildrenCount === 0,\n        key: 'SearchableSelectOptionGroup' + optionGroupIndex\n      }, optionGroupProps), optionGroupProps.children, childOptions); // then render all the ungrouped options at the end\n    }).concat((0, _map3.default)(ungroupedOptionData, function (_ref3) {\n      var optionProps = _ref3.optionProps,\n          optionIndex = _ref3.optionIndex;\n      return _this.renderOption(optionProps, optionIndex);\n    }));\n    var visibleOptionsCount = (0, _filter3.default)(options, function (option) {\n      return !option.props.isHidden;\n    }).length;\n    return visibleOptionsCount > 0 ? options : _react2.default.createElement(_DropMenu.DropMenuDumb.Option, {\n      isDisabled: true\n    }, _react2.default.createElement('span', {\n      className: cx('&-noresults')\n    }, 'No results match \"', searchText, '\"'));\n  },\n  render: function render() {\n    var props = this.props,\n        _props3 = this.props,\n        style = _props3.style,\n        className = _props3.className,\n        hasReset = _props3.hasReset,\n        isDisabled = _props3.isDisabled,\n        isLoading = _props3.isLoading,\n        isSelectionHighlighted = _props3.isSelectionHighlighted,\n        maxMenuHeight = _props3.maxMenuHeight,\n        searchText = _props3.searchText,\n        selectedIndex = _props3.selectedIndex,\n        onSelect = _props3.onSelect,\n        dropMenuProps = _props3.DropMenu;\n    var direction = dropMenuProps.direction,\n        optionContainerStyle = dropMenuProps.optionContainerStyle,\n        isExpanded = dropMenuProps.isExpanded;\n    var flattenedOptionsData = this.state.flattenedOptionsData;\n    var searchFieldProps = (0, _get3.default)((0, _componentTypes.getFirst)(props, _SearchField.SearchFieldDumb) || _react2.default.createElement(_SearchField.SearchFieldDumb, null), 'props');\n    var placeholderProps = (0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, SearchableSelect.Placeholder), 'props'));\n    var placeholder = (0, _get3.default)(placeholderProps, 'children', 'Select');\n    var isItemSelected = (0, _isNumber3.default)(selectedIndex);\n    return _react2.default.createElement(_DropMenu.DropMenuDumb, _extends({}, dropMenuProps, {\n      className: cx('&', className),\n      optionContainerStyle: (0, _assign3.default)({}, optionContainerStyle, !(0, _isNil3.default)(maxMenuHeight) ? {\n        maxHeight: maxMenuHeight\n      } : null),\n      isDisabled: isDisabled,\n      onSelect: onSelect,\n      selectedIndices: isItemSelected ? [selectedIndex] : [],\n      style: style\n    }), _react2.default.createElement(_DropMenu.DropMenuDumb.Control, null, _react2.default.createElement('div', {\n      tabIndex: 0,\n      className: cx('&-Control', {\n        '&-Control-is-highlighted': !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted,\n        '&-Control-is-selected': !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted,\n        '&-Control-is-expanded': isExpanded,\n        '&-Control-is-disabled': isDisabled\n      })\n    }, _react2.default.createElement('span', _extends({}, !isItemSelected ? placeholderProps : null, {\n      className: cx('&-Control-content', !isItemSelected ? (0, _get3.default)(placeholderProps, 'className') : null)\n    }), isItemSelected ? (0, _get3.default)((0, _componentTypes.getFirst)(flattenedOptionsData[selectedIndex].optionProps, SearchableSelect.Option.Selected), 'props.children') || function (Children) {\n      return (0, _isFunction3.default)(Children) ? _react2.default.createElement(Children, null) : Children;\n    }(flattenedOptionsData[selectedIndex].optionProps.children) : placeholder), _react2.default.createElement(_CaretIcon2.default, {\n      direction: isExpanded ? direction : 'down',\n      size: 8\n    }))), _react2.default.createElement(_DropMenu.DropMenuDumb.Header, {\n      className: cx('&-Search-container')\n    }, _react2.default.createElement(_SearchField.SearchFieldDumb, _extends({}, searchFieldProps, {\n      onChange: this.handleSearch,\n      value: searchText\n    }))), isLoading && _react2.default.createElement(_DropMenu.DropMenuDumb.Option, {\n      key: 'SearchableSelectLoading',\n      className: cx('&-Loading'),\n      isDisabled: true\n    }, _react2.default.createElement(_LoadingIcon2.default, null)), hasReset && isItemSelected && _react2.default.createElement(_DropMenu.DropMenuDumb.NullOption, placeholderProps, placeholder), this.renderOptions());\n  }\n});\nexports.default = (0, _stateManagement.buildHybridComponent)(SearchableSelect);\nexports.SearchableSelectDumb = SearchableSelect;","map":null,"metadata":{},"sourceType":"script"}