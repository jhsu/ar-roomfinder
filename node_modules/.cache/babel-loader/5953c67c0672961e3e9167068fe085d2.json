{"ast":null,"code":"'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar PropTypes = require('prop-types');\n\nvar STATIC_PROPTYPES = ['any', 'array', 'bool', 'func', 'number', 'object', 'string', 'symbol', 'node', 'element'];\nvar DYNAMIC_PROPTYPES = ['instanceOf', 'oneOf', 'oneOfType', 'arrayOf', 'objectOf', 'shape'];\nvar NAMESPACE = 'peek';\n\nvar interweave = function interweave(array0, array1) {\n  var result = [];\n  var maxLength = Math.max(array0.length, array1.length);\n\n  for (var i = 0; i < maxLength; i++) {\n    if (i < array0.length) {\n      result.push(array0[i]);\n    }\n\n    if (i < array1.length) {\n      result.push(array1[i]);\n    }\n  }\n\n  return result;\n};\n\nvar createValidator = function createValidator(propTypeValidator) {\n  var metaData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isRequired = arguments[2];\n  var namespace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NAMESPACE;\n  return Object.assign(function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'string') {\n      return createValidator(propTypeValidator, Object.assign({}, metaData, {\n        text: args[0]\n      }), isRequired);\n    } else if (Array.isArray(args[0]) && args[0].raw) {\n      var callSite = args[0],\n          substitutions = args.slice(1);\n      return createValidator(propTypeValidator, Object.assign({}, metaData, {\n        text: interweave(callSite, substitutions).join('')\n      }), isRequired);\n    } else {\n      return propTypeValidator.apply(undefined, args);\n    }\n  }, namespace ? _defineProperty({}, namespace, metaData) : metaData, {\n    isRequired: isRequired\n  }, {\n    assign: function assign() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return createValidator(propTypeValidator, Object.assign.apply(Object, [{}, metaData].concat(args)), isRequired, namespace);\n    }\n  });\n};\n\nvar createStaticMetaPropType = function createStaticMetaPropType(propType) {\n  var isRequired = createValidator(PropTypes[propType].isRequired, {\n    type: propType,\n    isRequired: true\n  });\n  return createValidator(PropTypes[propType], {\n    type: propType\n  }, isRequired);\n};\n\nvar createDynamicMetaPropType = function createDynamicMetaPropType(propType) {\n  return function () {\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    var isRequired = createValidator(PropTypes[propType].apply(PropTypes, args).isRequired, {\n      type: propType,\n      args: args,\n      isRequired: true\n    });\n    return createValidator(PropTypes[propType].apply(PropTypes, args), {\n      type: propType,\n      args: args\n    }, isRequired);\n  };\n};\n\nvar staticMetaPropTypes = STATIC_PROPTYPES.reduce(function (acc, propType) {\n  return Object.assign(acc, _defineProperty({}, propType, createStaticMetaPropType(propType)));\n}, {});\nvar dynamicMetaPropTypes = DYNAMIC_PROPTYPES.reduce(function (acc, propType) {\n  return Object.assign(acc, _defineProperty({}, propType, createDynamicMetaPropType(propType)));\n}, {});\n\nvar applyText = function applyText(propTypes) {\n  for (var _len4 = arguments.length, textObjs = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    textObjs[_key4 - 1] = arguments[_key4];\n  }\n\n  return textObjs.reduce(function (nextPropTypes, textObj) {\n    if (textObj) {\n      var appliedDescriptions = Object.keys(textObj).reduce(function (acc, propTypeKey) {\n        if (propTypes[propTypeKey]) {\n          acc[propTypeKey] = propTypes[propTypeKey](textObj[propTypeKey]);\n          return acc;\n        }\n\n        return acc;\n      }, {});\n      return Object.assign(nextPropTypes, appliedDescriptions);\n    }\n\n    return nextPropTypes;\n  }, Object.assign({}, propTypes));\n};\n\nvar defaultExport = Object.assign({}, PropTypes, staticMetaPropTypes, dynamicMetaPropTypes, {\n  createValidator: createValidator,\n  applyText: applyText,\n  PROPTYPES: [].concat(STATIC_PROPTYPES, DYNAMIC_PROPTYPES)\n});\ndefaultExport.__esModule = true;\ndefaultExport.default = defaultExport;\nmodule.exports = defaultExport;","map":null,"metadata":{},"sourceType":"script"}