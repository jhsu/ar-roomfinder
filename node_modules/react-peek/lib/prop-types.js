'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PropTypes = require('prop-types');

var STATIC_PROPTYPES = ['any', 'array', 'bool', 'func', 'number', 'object', 'string', 'symbol', 'node', 'element'];

var DYNAMIC_PROPTYPES = ['instanceOf', 'oneOf', 'oneOfType', 'arrayOf', 'objectOf', 'shape'];

var NAMESPACE = 'peek';

var interweave = function interweave(array0, array1) {
	var result = [];
	var maxLength = Math.max(array0.length, array1.length);
	for (var i = 0; i < maxLength; i++) {
		if (i < array0.length) {
			result.push(array0[i]);
		}
		if (i < array1.length) {
			result.push(array1[i]);
		}
	}
	return result;
};

var createValidator = function createValidator(propTypeValidator) {
	var metaData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var isRequired = arguments[2];
	var namespace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NAMESPACE;

	return Object.assign(function () {
		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		if (typeof args[0] === 'string') {
			return createValidator(propTypeValidator, Object.assign({}, metaData, {
				text: args[0]
			}), isRequired);
		} else if (Array.isArray(args[0]) && args[0].raw) {
			var callSite = args[0],
			    substitutions = args.slice(1);

			return createValidator(propTypeValidator, Object.assign({}, metaData, {
				text: interweave(callSite, substitutions).join('')
			}), isRequired);
		} else {
			return propTypeValidator.apply(undefined, args);
		}
	}, namespace ? _defineProperty({}, namespace, metaData) : metaData, { isRequired: isRequired }, {
		assign: function assign() {
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			return createValidator(propTypeValidator, Object.assign.apply(Object, [{}, metaData].concat(args)), isRequired, namespace);
		}
	});
};

var createStaticMetaPropType = function createStaticMetaPropType(propType) {
	var isRequired = createValidator(PropTypes[propType].isRequired, {
		type: propType,
		isRequired: true
	});

	return createValidator(PropTypes[propType], {
		type: propType
	}, isRequired);
};

var createDynamicMetaPropType = function createDynamicMetaPropType(propType) {
	return function () {
		for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
			args[_key3] = arguments[_key3];
		}

		var isRequired = createValidator(PropTypes[propType].apply(PropTypes, args).isRequired, {
			type: propType,
			args: args,
			isRequired: true
		});

		return createValidator(PropTypes[propType].apply(PropTypes, args), {
			type: propType,
			args: args
		}, isRequired);
	};
};

var staticMetaPropTypes = STATIC_PROPTYPES.reduce(function (acc, propType) {
	return Object.assign(acc, _defineProperty({}, propType, createStaticMetaPropType(propType)));
}, {});

var dynamicMetaPropTypes = DYNAMIC_PROPTYPES.reduce(function (acc, propType) {
	return Object.assign(acc, _defineProperty({}, propType, createDynamicMetaPropType(propType)));
}, {});

var applyText = function applyText(propTypes) {
	for (var _len4 = arguments.length, textObjs = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
		textObjs[_key4 - 1] = arguments[_key4];
	}

	return textObjs.reduce(function (nextPropTypes, textObj) {
		if (textObj) {
			var appliedDescriptions = Object.keys(textObj).reduce(function (acc, propTypeKey) {
				if (propTypes[propTypeKey]) {
					acc[propTypeKey] = propTypes[propTypeKey](textObj[propTypeKey]);
					return acc;
				}
				return acc;
			}, {});

			return Object.assign(nextPropTypes, appliedDescriptions);
		}
		return nextPropTypes;
	}, Object.assign({}, propTypes));
};

var defaultExport = Object.assign({}, PropTypes, staticMetaPropTypes, dynamicMetaPropTypes, {
	createValidator: createValidator,
	applyText: applyText,
	PROPTYPES: [].concat(STATIC_PROPTYPES, DYNAMIC_PROPTYPES)
});

defaultExport.__esModule = true;
defaultExport.default = defaultExport;

module.exports = defaultExport;