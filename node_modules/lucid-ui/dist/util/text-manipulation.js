'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _escapeRegExp2 = require('lodash/escapeRegExp');

var _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

exports.partitionText = partitionText;
exports.getCombinedChildText = getCombinedChildText;
exports.propsSearch = propsSearch;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function partitionText(text, pattern, length) {
	var index = void 0;

	if (length) {
		index = text.search(pattern);
	} else {
		var result = pattern.exec(text);
		if (result) {
			length = result[0].length;
			index = result.index;
		} else {
			length = 0;
			index = -1;
		}
	}

	if (index === -1) {
		return ['', '', text];
	} else if (index === 0) {
		return ['', text.substr(0, length), text.substring(length)];
	} else {
		return [text.substring(0, index), text.substr(index, length), text.substring(index + length)];
	}
}

function getCombinedChildText(node) {
	if (!node.children) {
		return '';
	}

	if ((0, _isString3.default)(node.children)) {
		return node.children;
	}

	return _react2.default.Children.toArray(node.children).filter(function (child) {
		return !(0, _isString3.default)(child);
	}).map(function (child) {
		return getCombinedChildText(child.props);
	}).reduce(function (combinedText, childText) {
		return combinedText + childText;
	}, (0, _find3.default)(node.children, _isString3.default) || '');
}

function propsSearch(text, node) {
	if (!text) {
		return true;
	}

	return new RegExp((0, _escapeRegExp3.default)(text), 'i').test(getCombinedChildText(node));
}