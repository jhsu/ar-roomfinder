'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _identity2 = require('lodash/identity');

var _identity3 = _interopRequireDefault(_identity2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _chartHelpers = require('../../util/chart-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Axis');

var string = _propTypes2.default.string,
    array = _propTypes2.default.array,
    func = _propTypes2.default.func,
    number = _propTypes2.default.number,
    oneOf = _propTypes2.default.oneOf;


var Axis = (0, _componentTypes.createClass)({
	displayName: 'Axis',

	statics: {},

	propTypes: {
		className: string,

		scale: func.isRequired,

		innerTickSize: number,

		outerTickSize: number,

		tickFormat: func,

		ticks: array,

		tickPadding: number,

		orient: oneOf(['top', 'bottom', 'left', 'right']),

		tickCount: number,

		textOrientation: oneOf(['vertical', 'horizontal', 'diagonal'])
	},

	getDefaultProps: function getDefaultProps() {
		return {
			innerTickSize: 6, // same as d3
			outerTickSize: 6, // same as d3
			tickPadding: 3, // same as d3
			textOrientation: 'horizontal',
			orient: 'bottom',
			tickCount: null
		};
	},
	render: function render() {
		var _props = this.props,
		    scale = _props.scale,
		    className = _props.className,
		    orient = _props.orient,
		    tickCount = _props.tickCount,
		    _props$ticks = _props.ticks,
		    ticks = _props$ticks === undefined ? scale.ticks ? scale.ticks(tickCount) : (0, _chartHelpers.discreteTicks)(scale.domain(), tickCount) : _props$ticks,
		    innerTickSize = _props.innerTickSize,
		    outerTickSize = _props.outerTickSize,
		    _props$tickFormat = _props.tickFormat,
		    tickFormat = _props$tickFormat === undefined ? scale.tickFormat ? scale.tickFormat() : _identity3.default : _props$tickFormat,
		    tickPadding = _props.tickPadding,
		    textOrientation = _props.textOrientation,
		    passThroughs = _objectWithoutProperties(_props, ['scale', 'className', 'orient', 'tickCount', 'ticks', 'innerTickSize', 'outerTickSize', 'tickFormat', 'tickPadding', 'textOrientation']);

		var tickSpacing = Math.max(innerTickSize, 0) + tickPadding;

		// Domain
		var range = scale.range();
		var sign = orient === 'top' || orient === 'left' ? -1 : 1;
		var isH = orient === 'top' || orient === 'bottom'; // is horizontal
		var getOrientationProperties = function getOrientationProperties(orient, textOrientation) {
			var textAnchor = void 0,
			    x = void 0,
			    y = void 0,
			    dy = void 0;
			var orientationSign = sign;
			switch (orient) {
				case 'bottom':
					if (textOrientation === 'vertical') {
						orientationSign = -orientationSign;
					}
					textAnchor = textOrientation === 'vertical' ? 'end' : textOrientation === 'diagonal' ? 'end' : 'middle';
					x = textOrientation === 'vertical' ? orientationSign * tickSpacing : textOrientation === 'diagonal' ? -orientationSign * tickSpacing : 0;
					y = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;
					dy = textOrientation === 'vertical' ? '.32em' : '.71em';
					break;
				case 'top':
					if (textOrientation === 'vertical') {
						orientationSign = -orientationSign;
					}
					textAnchor = textOrientation === 'vertical' ? 'start' : textOrientation === 'diagonal' ? 'start' : 'middle';
					x = textOrientation === 'vertical' || textOrientation === 'diagonal' ? -orientationSign * tickSpacing : 0;
					y = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;
					dy = textOrientation === 'vertical' || textOrientation === 'diagonal' ? '.32em' : '0em';
					break;
				case 'right':
					textAnchor = textOrientation === 'vertical' ? 'middle' : 'start';
					x = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;
					y = textOrientation === 'vertical' ? orientationSign * tickSpacing : textOrientation === 'horizontal' ? 0 : orientationSign * tickSpacing;
					dy = textOrientation === 'vertical' ? '.71em' : '.32em';
					break;
				case 'left':
					textAnchor = textOrientation === 'vertical' ? 'middle' : 'end';
					x = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;
					y = textOrientation === 'vertical' || textOrientation === 'diagonal' ? orientationSign * tickSpacing : 0;
					dy = textOrientation === 'vertical' ? '0em' : textOrientation === 'horizontal' ? '.32em' : '.71em';
					break;
			}
			return {
				transform: textOrientation === 'vertical' ? 'rotate(-90)' : textOrientation === 'horizontal' ? '' : 'rotate(-30)',
				textAnchor: textAnchor,
				x: x,
				y: y,
				dy: dy
			};
		};
		var orientationProperties = {
			vertical: getOrientationProperties(orient, 'vertical'),
			horizontal: getOrientationProperties(orient, 'horizontal'),
			diagonal: getOrientationProperties(orient, 'diagonal')
		};
		var orientationKey = textOrientation || 'horizontal';

		var scaleNormalized = scale;

		// Only band scales have `bandwidth`, this conditional helps center the
		// ticks on the bands
		if (scale.bandwidth) {
			var bandModifier = scale.bandwidth() / 2;
			scaleNormalized = function scaleNormalized(d) {
				return scale(d) + bandModifier;
			};
		}

		return _react2.default.createElement(
			'g',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Axis), { className: cx(className, '&') }),
			isH ? _react2.default.createElement('path', {
				className: cx('&-domain'),
				d: 'M' + range[0] + ',' + sign * outerTickSize + 'V0H' + range[1] + 'V' + sign * outerTickSize
			}) : _react2.default.createElement('path', {
				className: cx('&-domain'),
				d: 'M' + sign * outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + sign * outerTickSize
			}),
			(0, _map3.default)(ticks, function (tick) {
				return _react2.default.createElement(
					'g',
					{
						key: tick,
						transform: 'translate(' + (isH ? scaleNormalized(tick) : 0) + ', ' + (isH ? 0 : scaleNormalized(tick)) + ')'
					},
					_react2.default.createElement('line', {
						className: cx('&-tick'),
						x2: isH ? 0 : sign * innerTickSize,
						y2: isH ? sign * innerTickSize : 0
					}),
					_react2.default.createElement(
						'text',
						{
							className: cx('&-tick-text'),
							x: orientationProperties[orientationKey].x,
							y: orientationProperties[orientationKey].y,
							dy: orientationProperties[orientationKey].dy,
							style: {
								textAnchor: orientationProperties[orientationKey].textAnchor
							},
							transform: orientationProperties[orientationKey].transform
						},
						tickFormat(tick)
					)
				);
			})
		);
	}
});

exports.default = Axis;