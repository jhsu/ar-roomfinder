'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Required for all new components
var cx = _styleHelpers.lucidClassNames.bind('&-ExampleComponent');
var bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    string = _propTypes2.default.string,
    object = _propTypes2.default.object;

/**
 * {"categories": ["mycategory"]}
 *
 * Update "mycategory" to set the category your component falls under. You can see available categories
 * in the left hand column.
 *
 * Describe your component here. How it should be used, use cases and more.
 * Please see examples for more information.
 */

var ExampleComponent = (0, _componentTypes.createClass)({
	displayName: 'ExampleComponent',

	// reducers,
	// selectors,

	// Each prop in propTypes should include a description using /* */ of what
	// the prop is and how it should be used by other developers who consume your
	// component.
	propTypes: {
		/**
   * Appended to the component-specific class names set on the root
   * element.
   */
		className: string,

		/**
   * Any valid React children. This wraps your new component around whatever other React children consumers
   * of your component may choose to use. If consumers can not use any/all React children. Be sure to call
   * that out here.
   */
		children: node,

		/**
   * Example of a boolean prop.
   * Used in this example to control an additional classname
   * `lucid-ExampleComponent-isX' on the root element.
   */
		isX: bool,

		/**
   * Example of a customizable component function. Always show the signature.
   *
   * Signature: `(item, { event, props }) => {}`
   */
		onX: func,

		/**
   * Passed through to the root element.
   */
		style: object
	},

	handleX: function handleX() {
		alert('This is an example of a handler function');
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    children = _props.children,
		    isX = _props.isX,
		    style = _props.style;


		return _react2.default.createElement(
			'div',
			{
				className: cx('&', className, {
					'&-isX': isX
				}),
				style: style
			},
			children
		);
	}
});

exports.default = ExampleComponent;