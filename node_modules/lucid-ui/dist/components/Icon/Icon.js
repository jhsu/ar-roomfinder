'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _negate2 = require('lodash/negate');

var _negate3 = _interopRequireDefault(_negate2);

var _pickBy2 = require('lodash/pickBy');

var _pickBy3 = _interopRequireDefault(_pickBy2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Icon');

var any = _propTypes2.default.any,
    string = _propTypes2.default.string,
    number = _propTypes2.default.number,
    object = _propTypes2.default.object,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func;


var Icon = (0, _componentTypes.createClass)({
	displayName: 'Icon',

	statics: {},

	propTypes: {
		style: object,

		className: any,

		size: number,

		viewBox: string,

		aspectRatio: string,

		isBadge: bool,

		isClickable: bool,

		isDisabled: bool,

		onSelect: func,

		children: any
	},

	getDefaultProps: function getDefaultProps() {
		return {
			size: 16,
			aspectRatio: 'xMidYMid meet',
			viewBox: '0 0 16 16',
			isBadge: false,
			isDisabled: false,
			isClickable: false
		};
	},
	handleClick: function handleClick(event) {
		var _props = this.props,
		    onClick = _props.onClick,
		    isDisabled = _props.isDisabled,
		    isClickable = _props.isClickable,
		    onSelect = _props.onSelect;

		var domNode = _reactDom2.default.findDOMNode(this);

		if (onClick) {
			onClick(event);
		}

		if (onSelect && isClickable && !isDisabled) {
			domNode.focus();
			onSelect({ event: event, props: this.props });
		}
	},
	render: function render() {
		var _props2 = this.props,
		    className = _props2.className,
		    children = _props2.children,
		    size = _props2.size,
		    style = _props2.style,
		    viewBox = _props2.viewBox,
		    aspectRatio = _props2.aspectRatio,
		    isBadge = _props2.isBadge,
		    isClickable = _props2.isClickable,
		    isDisabled = _props2.isDisabled,
		    passThroughs = _objectWithoutProperties(_props2, ['className', 'children', 'size', 'style', 'viewBox', 'aspectRatio', 'isBadge', 'isClickable', 'isDisabled']);

		// Because we control the icon size inline, we must also control the border
		// radius in the case where they user wants `isBadge`. Later one, we filter
		// out any `undefined` properties using lodash methods.


		var actualStyle = _extends({}, style, {
			borderRadius: (0, _get3.default)(style, 'borderRadius', isBadge ? size + 'px' : undefined)
		});

		return _react2.default.createElement(
			'svg',
			_extends({
				width: size,
				height: size,
				viewBox: viewBox,
				preserveAspectRatio: aspectRatio
			}, (0, _componentTypes.omitProps)(passThroughs, Icon), {
				style: (0, _pickBy3.default)(actualStyle, (0, _negate3.default)(_isUndefined3.default)),
				className: cx('&', {
					'&-is-badge': isBadge,
					'&-is-clickable': !isDisabled && isClickable,
					'&-is-disabled': isDisabled
				}, className),
				onClick: this.handleClick
			}),
			children
		);
	}
});

exports.default = Icon;