'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _Overlay = require('../Overlay/Overlay');

var _Overlay2 = _interopRequireDefault(_Overlay);

var _GripperVerticalIcon = require('../Icon/GripperVerticalIcon/GripperVerticalIcon');

var _GripperVerticalIcon2 = _interopRequireDefault(_GripperVerticalIcon);

var _CrossIcon = require('../Icon/CrossIcon/CrossIcon');

var _CrossIcon2 = _interopRequireDefault(_CrossIcon);

var _DragCaptureZone = require('../DragCaptureZone/DragCaptureZone');

var _DragCaptureZone2 = _interopRequireDefault(_DragCaptureZone);

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _styleHelpers.lucidClassNames.bind('&-SidePanel');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    oneOf = _propTypes2.default.oneOf,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    string = _propTypes2.default.string;

var SidePanel = function (_React$Component) {
	_inherits(SidePanel, _React$Component);

	function SidePanel() {
		var _ref;

		_classCallCheck(this, SidePanel);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		var _this = _possibleConstructorReturn(this, (_ref = SidePanel.__proto__ || Object.getPrototypeOf(SidePanel)).call.apply(_ref, [this].concat(args)));

		var _args$ = args[0],
		    isExpanded = _args$.isExpanded,
		    width = _args$.width;

		_this.state = {
			isResizing: false,
			width: width,
			isExpanded: isExpanded
		};

		_this.handleResizeStart = _this.handleResizeStart.bind(_this);
		_this.handleResize = _this.handleResize.bind(_this);
		_this.handleResizeEnd = _this.handleResizeEnd.bind(_this);
		return _this;
	}

	_createClass(SidePanel, [{
		key: 'handleResizeStart',
		value: function handleResizeStart() {
			this.startWidth = this.state.width;
			this.setState({
				isResizing: true
			});
		}
	}, {
		key: 'handleResize',
		value: function handleResize(_ref2) {
			var dX = _ref2.dX;

			this.setState({
				width: this.startWidth + dX * (this.props.position === 'right' ? -1 : 1)
			});
		}
	}, {
		key: 'handleResizeEnd',
		value: function handleResizeEnd(_ref3, _ref4) {
			var dX = _ref3.dX;
			var event = _ref4.event;

			this.setState({
				width: this.startWidth + dX * (this.props.position === 'right' ? -1 : 1),
				isResizing: false
			});
			this.props.onResize(this.startWidth - dX, { props: this.props, event: event });
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(prevProps) {
			var _this2 = this;

			if (prevProps.isExpanded !== this.props.isExpanded) {
				this.timerId = setTimeout(function () {
					_this2.setState({
						isExpanded: _this2.props.isExpanded
					});
				}, 1);
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (this.timerId) {
				clearTimeout(this.timerId);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    className = _props.className,
			    isAnimated = _props.isAnimated,
			    isExpanded = _props.isExpanded,
			    isResizeDisabled = _props.isResizeDisabled,
			    onCollapse = _props.onCollapse,
			    position = _props.position,
			    preventBodyScroll = _props.preventBodyScroll,
			    passThroughs = _objectWithoutProperties(_props, ['children', 'className', 'isAnimated', 'isExpanded', 'isResizeDisabled', 'onCollapse', 'position', 'preventBodyScroll']);

			var headerEl = (0, _componentTypes.getFirst)(this.props, SidePanel.Header);
			var headerChildren = (0, _get3.default)(headerEl, 'props.children');

			if (preventBodyScroll) {
				window.document.body.style.overflow = isExpanded ? 'hidden' : '';
			}

			return _react2.default.createElement(
				_Overlay2.default,
				_extends({
					className: cx('&', {
						'&-is-expanded': isExpanded && this.state.isExpanded,
						'&-position-left': position === 'left',
						'&-position-right': position === 'right',
						'&-is-animated': isAnimated
					}, className),
					isShown: isExpanded || this.state.isExpanded,
					onBackgroundClick: onCollapse,
					onEscape: onCollapse,
					isAnimated: isAnimated
				}, (0, _componentTypes.omitProps)(passThroughs, SidePanel)),
				_react2.default.createElement(
					'div',
					{ className: cx('&-pane') },
					!isResizeDisabled && _react2.default.createElement(
						_DragCaptureZone2.default,
						{
							className: cx('&-grabber'),
							onDragStart: this.handleResizeStart,
							onDrag: this.handleResize,
							onDragEnd: this.handleResizeEnd
						},
						_react2.default.createElement(_GripperVerticalIcon2.default, null)
					),
					_react2.default.createElement(
						'div',
						{ className: cx('&-panel'), style: { width: this.state.width } },
						headerEl && _react2.default.createElement(
							'div',
							{ className: cx('&-header') },
							_react2.default.createElement(
								'div',
								{ className: cx('&-header-inner-wrapper') },
								_react2.default.createElement(
									'div',
									{ className: cx('&-header-content') },
									headerChildren
								),
								_react2.default.createElement(
									'div',
									{ className: cx('&-header-closer') },
									_react2.default.createElement(_CrossIcon2.default, { isClickable: true, size: 32, onClick: onCollapse })
								)
							)
						),
						_react2.default.createElement(
							'div',
							{ className: cx('&-content') },
							children
						)
					)
				)
			);
		}
	}]);

	return SidePanel;
}(_react2.default.Component);

SidePanel.displayName = 'SidePanel';
SidePanel.peek = {
	description: '\n\t\tA fixed-positioned overlay positioned on the side of the screen at full\n\t\tscreen height. Supports variable widths resized by the user or defined as a\n\t\tprop. Animated collapse and expand with optional Header and closer.\n\t',
	categories: ['layout']
};

SidePanel.propTypes = {
	children: node,
	className: string,
	isAnimated: bool,
	isExpanded: bool,
	isResizeDisabled: bool,
	onCollapse: func,
	onResize: func,
	position: oneOf(['left', 'right']),
	preventBodyScroll: bool,
	width: number,
	Header: any
};

SidePanel.defaultProps = {
	isAnimated: true,
	isExpanded: true,
	isResizeDisabled: false,
	onCollapse: _noop3.default,
	onResize: _noop3.default,
	position: 'right',
	preventBodyScroll: false,
	width: 240
};

SidePanel.Header = function () {
	return null;
};
SidePanel.Header.displayName = 'SidePanel.Header';
SidePanel.Header.propName = 'Header';
SidePanel.Header.peek = {
	description: '\n\t\tDefines the Header content of SidePanel. If no content is defined, it will\n\t\tstill show the close button.\n\t'
};

exports.default = SidePanel;