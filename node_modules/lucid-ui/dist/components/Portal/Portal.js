'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _componentTypes = require('../../util/component-types');

var _styleHelpers = require('../../util/style-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cx = _styleHelpers.lucidClassNames.bind('&-Portal');

var any = _propTypes2.default.any,
    node = _propTypes2.default.node,
    string = _propTypes2.default.string;

// This component passes the `context` prop with { store } from react-redux
// Provider on to the childContext

var WithStoreContext = (0, _componentTypes.createClass)({
	displayName: 'WithContext',
	propTypes: {
		context: any,
		children: node
	},
	childContextTypes: {
		store: any
	},
	getChildContext: function getChildContext() {
		return this.props.context;
	},
	render: function render() {
		return this.props.children;
	}
});

var Portal = (0, _componentTypes.createClass)({
	displayName: 'Portal',

	statics: {},

	propTypes: {
		children: node,
		className: any,

		portalId: string.isRequired
	},
	contextTypes: {
		store: any // access `store` from the context object
	},
	render: function render() {
		return null;
	},
	componentDidMount: function componentDidMount() {
		var portalId = this.props.portalId;


		var portalElement = window.document.getElementById(portalId);
		if (!portalElement) {
			portalElement = window.document.createElement('div');
			portalElement.id = portalId;
			window.document.body.appendChild(portalElement);
		}
		this.portalElement = portalElement;
		this.componentDidUpdate();
	},
	componentWillUnmount: function componentWillUnmount() {
		_reactDom2.default.unmountComponentAtNode(this.portalElement);
		window.document.body.removeChild(this.portalElement);
	},
	componentDidUpdate: function componentDidUpdate() {
		_reactDom2.default.render(_react2.default.createElement(
			WithStoreContext,
			{ context: this.context },
			_react2.default.createElement(
				'div',
				_extends({}, (0, _componentTypes.omitProps)(this.props, Portal), {
					className: cx('&', this.props.className)
				}),
				this.props.children
			)
		), this.portalElement);
	}
});

exports.default = Portal;