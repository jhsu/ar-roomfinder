'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDayPicker = require('react-day-picker');

var _reactDayPicker2 = _interopRequireDefault(_reactDayPicker);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-CalendarMonth');

var bool = _propTypes2.default.bool,
    instanceOf = _propTypes2.default.instanceOf,
    number = _propTypes2.default.number,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string;


var CalendarMonth = (0, _componentTypes.createClass)({
	displayName: 'CalendarMonth',

	statics: {},

	_isPrivate: true,

	propTypes: {
		className: string,

		monthOffset: number,

		initialMonth: instanceOf(Date),

		cursor: instanceOf(Date),

		from: instanceOf(Date),

		to: instanceOf(Date),

		selectMode: oneOf(['day', 'from', 'to']),

		shouldComponentUpdate: bool
	},

	getDefaultProps: function getDefaultProps() {
		return {
			monthOffset: 0,
			initialMonth: new Date(),
			cursor: null,
			from: null,
			to: null,
			selectMode: 'day',
			shouldComponentUpdate: true
		};
	},
	modifierRange: function modifierRange(day) {
		var _props = this.props,
		    cursor = _props.cursor,
		    from = _props.from,
		    to = _props.to,
		    selectMode = _props.selectMode;


		if (cursor) {
			if (selectMode === 'day') {
				return _reactDayPicker.DateUtils.isSameDay(day, new Date(cursor));
			} else if (from || to) {
				return _reactDayPicker.DateUtils.isDayInRange(day, {
					from: new Date(selectMode === 'to' ? from : to),
					to: new Date(cursor)
				});
			}
			return _reactDayPicker.DateUtils.isSameDay(day, new Date(cursor));
		}

		if (from && to) {
			return _reactDayPicker.DateUtils.isDayInRange(day, {
				from: new Date(from),
				to: new Date(to)
			});
		}

		return false;
	},
	modifierFrom: function modifierFrom(day) {
		var from = this.props.from;


		return _reactDayPicker.DateUtils.isSameDay(day, new Date(from));
	},
	modifierTo: function modifierTo(day) {
		var to = this.props.to;


		return _reactDayPicker.DateUtils.isSameDay(day, new Date(to));
	},
	shouldComponentUpdate: function shouldComponentUpdate() {
		return this.props.shouldComponentUpdate;
	},
	render: function render() {
		var _props2 = this.props,
		    className = _props2.className,
		    monthOffset = _props2.monthOffset,
		    initialMonth = _props2.initialMonth,
		    passThroughs = _objectWithoutProperties(_props2, ['className', 'monthOffset', 'initialMonth']);

		// It can be tricky to increment months using JavaScript dates, this should
		// handle the edge cases.
		// http://stackoverflow.com/questions/499838/javascript-date-next-month


		var monthDate = new Date(initialMonth.getFullYear(), initialMonth.getMonth() + monthOffset, 1);

		return _react2.default.createElement(_reactDayPicker2.default, _extends({
			key: monthOffset,
			className: cx('&', className),
			initialMonth: monthDate,
			canChangeMonth: false,
			weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
		}, passThroughs, {
			modifiers: _extends({
				range: this.modifierRange,
				from: this.modifierFrom,
				to: this.modifierTo
			}, passThroughs.modifiers)
		}));
	}
});

exports.default = CalendarMonth;