'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.PieChartDumb = undefined;

var _partial2 = require('lodash/partial');

var _partial3 = _interopRequireDefault(_partial2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _identity2 = require('lodash/identity');

var _identity3 = _interopRequireDefault(_identity2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _d3Shape = require('d3-shape');

var d3Shape = _interopRequireWildcard(_d3Shape);

var _charts = require('../../constants/charts');

var chartConstants = _interopRequireWildcard(_charts);

var _stateManagement = require('../../util/state-management');

var _Line = require('../../components/Line/Line');

var _Line2 = _interopRequireDefault(_Line);

var _ToolTip = require('../../components/ToolTip/ToolTip');

var _PieChart = require('./PieChart.reducers');

var reducers = _interopRequireWildcard(_PieChart);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-PieChart');

var string = _propTypes2.default.string,
    number = _propTypes2.default.number,
    arrayOf = _propTypes2.default.arrayOf,
    bool = _propTypes2.default.bool,
    shape = _propTypes2.default.shape,
    object = _propTypes2.default.object,
    func = _propTypes2.default.func;


var DONUT_WIDTH = 15;
var HOVER_SCALE = 1.1; // duplicated in .less file
var INNER_RADIUS = 0.5;

var PieChart = (0, _componentTypes.createClass)({
	displayName: 'PieChart',

	statics: {
		HOVER_SCALE: HOVER_SCALE,
		DONUT_WIDTH: DONUT_WIDTH,
		MARGIN: {
			top: 10,
			right: 10,
			bottom: 10,
			left: 10
		}
	},

	reducers: reducers,

	propTypes: {
		style: object,

		className: string,

		height: number,

		width: number,

		margin: shape({
			top: number,
			right: number,
			bottom: number,
			left: number
		}),

		data: arrayOf(object),

		hasToolTips: bool,

		hasStroke: bool,

		palette: arrayOf(string),

		colorMap: object,

		ToolTip: shape(_ToolTip.ToolTipDumb.propTypes),

		isDonut: bool,

		isHovering: bool,

		hoveringIndex: number,

		onMouseOver: func,

		onMouseOut: func,

		donutWidth: number,

		xAxisField: string,

		xAxisFormatter: func,

		yAxisField: string,

		yAxisFormatter: func
	},

	getDefaultProps: function getDefaultProps() {
		return {
			height: 200,
			width: 200,
			// duplicated because `statics` aren't available during getDefaultProps
			margin: {
				top: 10,
				right: 10,
				bottom: 10,
				left: 10
			},
			palette: chartConstants.PALETTE_6,
			hasToolTips: true,
			hasStroke: true,
			isDonut: false,
			donutWidth: DONUT_WIDTH,
			ToolTip: _ToolTip.ToolTipDumb.getDefaultProps(),

			isHovering: false,
			hoveringIndex: 0,
			onMouseOver: _noop3.default,
			onMouseOut: _noop3.default,

			xAxisField: 'x',
			xAxisFormatter: _identity3.default,

			yAxisField: 'y',
			yAxisFormatter: _identity3.default
		};
	},
	handleMouseOver: function handleMouseOver(index, event) {
		this.props.onMouseOver(index, {
			props: this.props,
			event: event
		});
	},
	handleMouseOut: function handleMouseOut(event) {
		this.props.onMouseOut({
			props: this.props,
			event: event
		});
	},
	render: function render() {
		var _this = this;

		var _props = this.props,
		    style = _props.style,
		    className = _props.className,
		    height = _props.height,
		    width = _props.width,
		    marginOriginal = _props.margin,
		    data = _props.data,
		    hasToolTips = _props.hasToolTips,
		    hasStroke = _props.hasStroke,
		    palette = _props.palette,
		    colorMap = _props.colorMap,
		    isDonut = _props.isDonut,
		    toolTipProps = _props.ToolTip,
		    isHovering = _props.isHovering,
		    hoveringIndex = _props.hoveringIndex,
		    xAxisField = _props.xAxisField,
		    xAxisFormatter = _props.xAxisFormatter,
		    yAxisField = _props.yAxisField,
		    yAxisFormatter = _props.yAxisFormatter,
		    passThroughs = _objectWithoutProperties(_props, ['style', 'className', 'height', 'width', 'margin', 'data', 'hasToolTips', 'hasStroke', 'palette', 'colorMap', 'isDonut', 'ToolTip', 'isHovering', 'hoveringIndex', 'xAxisField', 'xAxisFormatter', 'yAxisField', 'yAxisFormatter']);

		var margin = _extends({}, PieChart.MARGIN, marginOriginal);

		var svgClasses = cx(className, '&');

		// TODO: Consider displaying something specific when there is no data,
		// perhaps a loading indicator.
		if ((0, _isEmpty3.default)(data) || width < 1 || height < 1) {
			return _react2.default.createElement('svg', _extends({}, (0, _componentTypes.omitProps)((0, _componentTypes.omitProps)(passThroughs, _ToolTip.ToolTipDumb), PieChart), {
				style: style,
				className: svgClasses,
				width: width,
				height: height
			}));
		}

		var innerWidth = width - margin.left - margin.right;
		var innerHeight = height - margin.top - margin.bottom;

		var outerRadius = Math.min(innerWidth, innerHeight) / 2;

		var arc = d3Shape.arc().innerRadius(isDonut ? outerRadius - PieChart.DONUT_WIDTH : INNER_RADIUS).outerRadius(outerRadius);

		// Useful for capturing hovers when we're in donut mode
		var arcFull = d3Shape.arc().innerRadius(0).outerRadius(outerRadius);

		var pie = d3Shape.pie().sort(null); // needed to put the slices in proper order
		var pieData = pie((0, _map3.default)(data, yAxisField));

		return _react2.default.createElement(
			'svg',
			_extends({}, (0, _componentTypes.omitProps)((0, _componentTypes.omitProps)(passThroughs, _ToolTip.ToolTipDumb), PieChart), {
				style: style,
				className: svgClasses,
				width: width,
				height: height
			}),
			_react2.default.createElement(
				_ToolTip.ToolTipDumb,
				_extends({}, toolTipProps, {
					isExpanded: hasToolTips && isHovering,
					onMouseOver: _noop3.default,
					onMouseOut: this.handleMouseOut
				}),
				_react2.default.createElement(
					_ToolTip.ToolTipDumb.Target,
					{ elementType: 'g' },
					_react2.default.createElement(
						'g',
						{ transform: 'translate(' + margin.left + ', ' + margin.top + ')' },
						_react2.default.createElement(
							'g',
							{ transform: 'translate(' + innerWidth / 2 + ', ' + innerHeight / 2 + ')' },
							(0, _map3.default)(pieData, function (pieDatum, index) {
								return _react2.default.createElement(
									'g',
									{
										key: index,
										className: cx('&-slice-group', {
											'&-slice-group-is-hovering': isHovering && hoveringIndex === index
										})
									},
									_react2.default.createElement(_Line2.default, {
										key: index,
										className: cx('&-slice', {
											'&-slice-has-stroke': hasStroke
										}),
										d: arc(pieDatum),
										color: (0, _get3.default)(colorMap, data[index][xAxisField], palette[index % palette.length]),
										transform: 'scale(' + (isHovering && hoveringIndex === index ? HOVER_SCALE : 1) + ')'
									}),
									_react2.default.createElement('path', {
										className: cx('&-slice-hover'),
										d: arcFull(pieDatum),
										transform: 'scale(' + HOVER_SCALE + ')',
										onMouseOver: (0, _partial3.default)(_this.handleMouseOver, index),
										onMouseOut: hasToolTips ? _noop3.default : _this.handleMouseOut
									})
								);
							})
						)
					)
				),
				_react2.default.createElement(
					_ToolTip.ToolTipDumb.Title,
					null,
					xAxisFormatter((0, _get3.default)(data, '[' + hoveringIndex + '].' + xAxisField))
				),
				_react2.default.createElement(
					_ToolTip.ToolTipDumb.Body,
					null,
					yAxisFormatter((0, _get3.default)(data, '[' + hoveringIndex + '].' + yAxisField))
				)
			)
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(PieChart);
exports.PieChartDumb = PieChart;