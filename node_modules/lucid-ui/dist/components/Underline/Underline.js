'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _escapeRegExp2 = require('lodash/escapeRegExp');

var _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isRegExp2 = require('lodash/isRegExp');

var _isRegExp3 = _interopRequireDefault(_isRegExp2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _textManipulation = require('../../util/text-manipulation');

var _styleHelpers = require('../../util/style-helpers.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Underline');

var node = _propTypes2.default.node,
    string = _propTypes2.default.string,
    instanceOf = _propTypes2.default.instanceOf,
    oneOfType = _propTypes2.default.oneOfType;


var matchAllRegexp = /^.*$/;

var Underline = function Underline(_ref) {
	var className = _ref.className,
	    children = _ref.children,
	    match = _ref.match,
	    passThroughs = _objectWithoutProperties(_ref, ['className', 'children', 'match']);

	if (!(0, _isRegExp3.default)(match)) {
		if ((0, _isString3.default)(match)) {
			match = new RegExp((0, _escapeRegExp3.default)(match), 'i');
		} else {
			match = matchAllRegexp;
		}
	}

	if (!(0, _isString3.default)(children)) {
		return _react2.default.createElement(
			'span',
			_extends({ className: cx('&', className) }, passThroughs),
			_react2.default.createElement(
				'span',
				{
					style: match === matchAllRegexp ? { textDecoration: 'underline' } : null
				},
				children
			)
		);
	}

	var _partitionText = (0, _textManipulation.partitionText)(children, match),
	    _partitionText2 = _slicedToArray(_partitionText, 3),
	    pre = _partitionText2[0],
	    matchText = _partitionText2[1],
	    post = _partitionText2[2];

	return _react2.default.createElement(
		'span',
		_extends({ className: cx('&', className) }, passThroughs),
		[pre && _react2.default.createElement(
			'span',
			{ key: 'pre' },
			pre
		), matchText && _react2.default.createElement(
			'span',
			{ key: 'match', style: { textDecoration: 'underline' } },
			matchText
		), post && _react2.default.createElement(
			'span',
			{ key: 'post' },
			post
		)]
	);
};

Underline.displayName = 'Underline';

Underline.peek = {
	description: '\n\t\tUnderlines a portion of text that matches a given pattern\n\t',
	categories: ['controls', 'selectors']
};

Underline.propTypes = {
	className: string,
	children: node,
	match: oneOfType([string, instanceOf(RegExp)])
};

exports.default = Underline;