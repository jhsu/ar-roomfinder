'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.DateSelectDumb = undefined;

var _times2 = require('lodash/times');

var _times3 = _interopRequireDefault(_times2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _clamp2 = require('lodash/clamp');

var _clamp3 = _interopRequireDefault(_clamp2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _stateManagement = require('../../util/state-management');

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _DateSelect = require('./DateSelect.reducers');

var reducers = _interopRequireWildcard(_DateSelect);

var _InfiniteSlidePanel = require('../InfiniteSlidePanel/InfiniteSlidePanel');

var _InfiniteSlidePanel2 = _interopRequireDefault(_InfiniteSlidePanel);

var _CalendarMonth = require('../CalendarMonth/CalendarMonth');

var _CalendarMonth2 = _interopRequireDefault(_CalendarMonth);

var _ChevronThinIcon = require('../Icon/ChevronThinIcon/ChevronThinIcon');

var _ChevronThinIcon2 = _interopRequireDefault(_ChevronThinIcon);

var _reactDayPicker = require('react-day-picker');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-DateSelect');

var NAV_BUTTON_SIZE = 32;
var clampMonthsShown = function clampMonthsShown(monthsShown) {
	return (0, _clamp3.default)(monthsShown, 1, 6);
};

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    instanceOf = _propTypes2.default.instanceOf,
    number = _propTypes2.default.number,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string;


var DateSelect = (0, _componentTypes.createClass)({
	displayName: 'DateSelect',

	statics: {},

	components: {
		CalendarMonth: (0, _componentTypes.createClass)({
			displayName: 'DateSelect.CalendarMonth',
			statics: {},
			propName: 'CalendarMonth'
		})
	},

	propTypes: {
		className: string,

		monthsShown: number,

		calendarsRendered: number,

		offset: number,

		from: instanceOf(Date),

		to: instanceOf(Date),

		selectMode: oneOf(['day', 'from', 'to']),

		initialMonth: instanceOf(Date),

		selectedDays: any,

		disabledDays: any,

		showDivider: bool,

		onSwipe: func,

		onPrev: func,

		onNext: func,

		onSelectDate: func,

		isFontSizeRelative: bool,

		showCursorHighlight: bool,

		useSlidePanel: bool
	},

	getDefaultProps: function getDefaultProps() {
		return {
			monthsShown: 1,
			calendarsRendered: 6,
			offset: 0,
			from: null,
			to: null,
			initialMonth: new Date(),
			selectedDays: null,
			disabledDays: null,
			showDivider: false,
			onSwipe: _noop3.default,
			onPrev: _noop3.default,
			onNext: _noop3.default,
			onSelectDate: _noop3.default,
			isFontSizeRelative: false,
			showCursorHighlight: true,
			useSlidePanel: true
		};
	},


	reducers: reducers,

	getInitialState: function getInitialState() {
		return {
			cursor: null
		};
	},
	handleDayClick: function handleDayClick(day, _ref, event) {
		var disabled = _ref.disabled;
		var onSelectDate = this.props.onSelectDate;


		if (!disabled) {
			onSelectDate(day, { event: event, props: this.props });
		}
	},
	handleDayMouseEnter: function handleDayMouseEnter(day, _ref2) {
		var disabled = _ref2.disabled;

		if (disabled) {
			this.setState({
				cursor: null
			});
		} else {
			this.setState({
				cursor: day
			});
		}
	},
	handleDayMouseLeave: function handleDayMouseLeave() {
		this.setState({
			cursor: null
		});
	},
	handlePrev: function handlePrev(event) {
		this.props.onPrev({ event: event, props: this.props });
	},
	handleNext: function handleNext(event) {
		this.props.onNext({ event: event, props: this.props });
	},
	componentWillMount: function componentWillMount() {
		this.initialMonth = new Date(this.props.initialMonth);
	},
	componentDidMount: function componentDidMount() {
		var _props = this.props,
		    isFontSizeRelative = _props.isFontSizeRelative,
		    monthsShownRaw = _props.monthsShown;


		var monthsShown = clampMonthsShown(monthsShownRaw);

		if (isFontSizeRelative) {
			var rootElement = _reactDom2.default.findDOMNode(this.rootRef);

			var _rootElement$getBound = rootElement.getBoundingClientRect(),
			    width = _rootElement$getBound.width,
			    height = _rootElement$getBound.height;

			var navButtonsWidth = NAV_BUTTON_SIZE * 2;
			var oneMonthShownWidth = (width - navButtonsWidth) / monthsShown + navButtonsWidth;
			var size = Math.sqrt(oneMonthShownWidth * height);
			var relativeFontSize = Math.round(size / 24);
			var relativeMinWidth = (width - navButtonsWidth) / monthsShown * 10.1075 / relativeFontSize * monthsShown + navButtonsWidth;

			rootElement.style.fontSize = relativeFontSize + 'px';
			rootElement.style.minWidth = relativeMinWidth + 'px';
		}
	},
	renderCalendarMonth: function renderCalendarMonth(_ref3) {
		var key = _ref3.key,
		    offset = _ref3.offset,
		    calendarPosition = _ref3.calendarPosition,
		    initialMonth = _ref3.initialMonth,
		    cursor = _ref3.cursor,
		    isRangeSameDay = _ref3.isRangeSameDay,
		    from = _ref3.from,
		    to = _ref3.to,
		    selectedDays = _ref3.selectedDays,
		    disabledDays = _ref3.disabledDays,
		    selectMode = _ref3.selectMode,
		    onDayClick = _ref3.onDayClick,
		    showCursorHighlight = _ref3.showCursorHighlight,
		    onDayMouseEnter = _ref3.onDayMouseEnter,
		    onDayMouseLeave = _ref3.onDayMouseLeave,
		    calendarMonthProps = _ref3.calendarMonthProps;

		return _react2.default.createElement(_CalendarMonth2.default, _extends({
			key: key,
			className: cx('&-CalendarMonth'),
			monthOffset: offset + calendarPosition,
			initialMonth: initialMonth,
			cursor: cursor,
			from: isRangeSameDay ? null : from,
			to: isRangeSameDay ? null : to,
			selectedDays: isRangeSameDay ? from : selectedDays,
			disabledDays: disabledDays,
			selectMode: selectMode,
			onDayClick: onDayClick,
			onDayMouseEnter: showCursorHighlight ? onDayMouseEnter : null,
			onDayMouseLeave: showCursorHighlight ? onDayMouseLeave : null
		}, calendarMonthProps));
	},
	render: function render() {
		var _this = this;

		var _props2 = this.props,
		    className = _props2.className,
		    monthsShownRaw = _props2.monthsShown,
		    calendarsRendered = _props2.calendarsRendered,
		    offset = _props2.offset,
		    from = _props2.from,
		    to = _props2.to,
		    selectMode = _props2.selectMode,
		    selectedDays = _props2.selectedDays,
		    disabledDays = _props2.disabledDays,
		    showDivider = _props2.showDivider,
		    onSwipe = _props2.onSwipe,
		    showCursorHighlight = _props2.showCursorHighlight,
		    useSlidePanel = _props2.useSlidePanel,
		    passThroughs = _objectWithoutProperties(_props2, ['className', 'monthsShown', 'calendarsRendered', 'offset', 'from', 'to', 'selectMode', 'selectedDays', 'disabledDays', 'showDivider', 'onSwipe', 'showCursorHighlight', 'useSlidePanel']);

		var cursor = this.state.cursor;

		var isRangeSameDay = _reactDayPicker.DateUtils.isSameDay(from, to);

		var calendarMonth = (0, _componentTypes.getFirst)(this.props, DateSelect.CalendarMonth) || _react2.default.createElement(DateSelect.CalendarMonth, null);
		var monthsShown = clampMonthsShown(monthsShownRaw);

		/* istanbul ignore next */
		return _react2.default.createElement(
			'section',
			_extends({
				ref: function ref(_ref4) {
					_this.rootRef = _ref4;
				},
				className: cx('&', className, {
					'&-show-divider': showDivider
				}),
				style: _extends({
					minWidth: NAV_BUTTON_SIZE * 2 + 185 * monthsShown
				}, passThroughs.style)
			}, (0, _componentTypes.omitProps)(passThroughs, DateSelect)),
			_react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_ChevronThinIcon2.default, {
					className: cx('&-chevron'),
					size: NAV_BUTTON_SIZE,
					isClickable: true,
					direction: 'left',
					onClick: this.handlePrev
				})
			),
			useSlidePanel ? _react2.default.createElement(
				_InfiniteSlidePanel2.default,
				{
					className: cx('&-InfiniteSlidePanel', '&-slidePanel'),
					totalSlides: calendarsRendered,
					slidesToShow: monthsShown,
					offset: offset,
					onSwipe: onSwipe
				},
				_react2.default.createElement(
					_InfiniteSlidePanel2.default.Slide,
					{ className: cx('&-slide') },
					function (slideOffset) {
						return _react2.default.createElement(
							'div',
							{ className: cx('&-slide-content') },
							_this.renderCalendarMonth({
								key: slideOffset,
								offset: offset,
								calendarPosition: slideOffset - offset,
								initialMonth: _this.initialMonth,
								cursor: cursor,
								isRangeSameDay: isRangeSameDay,
								from: from,
								to: to,
								selectedDays: selectedDays,
								disabledDays: disabledDays,
								selectMode: selectMode,
								onDayClick: _this.handleDayClick,
								showCursorHighlight: showCursorHighlight,
								onDayMouseEnter: _this.handleDayMouseEnter,
								onDayMouseLeave: _this.handleDayMouseLeave,
								calendarMonthProps: calendarMonth.props
							})
						);
					}
				)
			) : _react2.default.createElement(
				'div',
				{ className: cx('&-slidePanel', '&-slidePanel-simple') },
				(0, _times3.default)(monthsShown, function (calendarIndex) {
					return _react2.default.createElement(
						'div',
						{
							className: cx('&-slide', '&-slide-simple'),
							key: calendarIndex
						},
						_react2.default.createElement(
							'div',
							{ className: cx('&-slide-content') },
							_this.renderCalendarMonth({
								offset: offset,
								calendarPosition: calendarIndex,
								initialMonth: _this.initialMonth,
								cursor: cursor,
								isRangeSameDay: isRangeSameDay,
								from: from,
								to: to,
								selectedDays: selectedDays,
								disabledDays: disabledDays,
								selectMode: selectMode,
								onDayClick: _this.handleDayClick,
								showCursorHighlight: showCursorHighlight,
								onDayMouseEnter: _this.handleDayMouseEnter,
								onDayMouseLeave: _this.handleDayMouseLeave,
								calendarMonthProps: calendarMonth.props
							})
						)
					);
				})
			),
			_react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_ChevronThinIcon2.default, {
					className: cx('&-chevron'),
					size: NAV_BUTTON_SIZE,
					isClickable: true,
					direction: 'right',
					onClick: this.handleNext
				})
			)
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(DateSelect);
exports.DateSelectDumb = DateSelect;