'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _defer2 = require('lodash/defer');

var _defer3 = _interopRequireDefault(_defer2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _DragCaptureZone = require('../DragCaptureZone/DragCaptureZone');

var _DragCaptureZone2 = _interopRequireDefault(_DragCaptureZone);

var _reactMotion = require('react-motion');

var _motionSpring = require('../../constants/motion-spring');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-SplitVertical');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    string = _propTypes2.default.string,
    oneOfType = _propTypes2.default.oneOfType;


var SplitVertical = (0, _componentTypes.createClass)({
	displayName: 'SplitVertical',

	statics: {},

	_isPrivate: true,

	propTypes: {
		className: any,

		children: node,

		isResizeable: bool,

		isExpanded: bool,

		isAnimated: bool,

		onResizing: func,

		onResize: func,

		collapseShift: number
	},

	components: {
		LeftPane: (0, _componentTypes.createClass)({
			displayName: 'SplitVertical.LeftPane',
			statics: {},
			propTypes: {
				children: node,
				width: oneOfType([number, string]),
				isPrimary: bool
			},
			getDefaultProps: function getDefaultProps() {
				return {
					isPrimary: false
				};
			}
		}),

		RightPane: (0, _componentTypes.createClass)({
			displayName: 'SplitVertical.RightPane',
			statics: {},
			propTypes: {
				children: node,
				width: oneOfType([number, string]),
				isPrimary: bool
			},
			getDefaultProps: function getDefaultProps() {
				return {
					isPrimary: false
				};
			}
		}),

		Divider: (0, _componentTypes.createClass)({
			displayName: 'SplitVertical.Divider',
			statics: {},
			propTypes: {
				children: node
			}
		})
	},

	getDefaultProps: function getDefaultProps() {
		return {
			isExpanded: true,
			isAnimated: false,
			collapseShift: 0,
			onResizing: _noop3.default,
			onResize: _noop3.default,
			isResizeable: true
		};
	},
	getInitialState: function getInitialState() {
		return {
			isAnimated: false, // to ensure first render doesn't show a collapse animation
			isExpanded: true,
			collapseAmount: 250
		};
	},
	getPanes: function getPanes() {
		var children = this.props.children;
		var _storedRefs = this.storedRefs,
		    leftPaneRef = _storedRefs.leftPane,
		    rightPaneRef = _storedRefs.rightPane;


		var leftPaneElement = (0, _get3.default)((0, _componentTypes.filterTypes)(children, SplitVertical.LeftPane), 0, _react2.default.createElement(SplitVertical.LeftPane, null));
		var rightPaneElement = (0, _get3.default)((0, _componentTypes.filterTypes)(children, SplitVertical.RightPane), 0, _react2.default.createElement(SplitVertical.RightPane, null));
		var primaryElement = void 0,
		    primaryRef = void 0;
		var secondaryElement = void 0,
		    secondaryRef = void 0;

		if (leftPaneElement.props.isPrimary && !rightPaneElement.props.isPrimary) {
			primaryElement = leftPaneElement;
			primaryRef = leftPaneRef;
			secondaryElement = rightPaneElement;
			secondaryRef = rightPaneRef;
		} else {
			primaryElement = rightPaneElement;
			primaryRef = rightPaneRef;
			secondaryElement = leftPaneElement;
			secondaryRef = leftPaneRef;
		}

		return {
			left: leftPaneElement.props,
			right: rightPaneElement.props,
			primary: primaryElement.props,
			primaryRef: primaryRef,
			secondary: secondaryElement.props,
			secondaryRef: secondaryRef
		};
	},


	// Style changes to DOM nodes are updated here to shortcut the state -> render cycle for better performance. Also the Style updates in this
	// function are entirely transient and can be flushed with a props update to `width`.
	applyDeltaToSecondaryWidth: function applyDeltaToSecondaryWidth(dX, isExpanded, secondaryStartRect, secondaryRef, secondary, right, innerRef, primaryRef) {
		var collapseShift = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;

		if (isExpanded) {
			secondaryRef.style.flexBasis = secondaryStartRect.width + dX * (secondary === right ? -1 : 1) + 'px';
			return secondaryStartRect.width + dX * (secondary === right ? -1 : 1);
		} else {
			var overlapWidth = (secondary === right ? secondaryStartRect.width + dX : secondaryStartRect.width - dX) - collapseShift;

			if (overlapWidth > 0) {
				this.collapseSecondary(overlapWidth);
				return secondaryStartRect.width - overlapWidth;
			} else {
				this.expandSecondary();
				secondaryRef.style.flexBasis = (dX + collapseShift) * (secondary === right ? -1 : 1) + 'px';
				return (dX + collapseShift) * (secondary === right ? -1 : 1);
			}
		}
	},
	expandSecondary: function expandSecondary() {
		this.setState({ isExpanded: true });
	},
	collapseSecondary: function collapseSecondary(collapseAmount) {
		this.setState({ isExpanded: false, collapseAmount: collapseAmount });
	},
	disableAnimation: function disableAnimation(innerRef, secondaryRef, primaryRef) {
		innerRef.style.transitionDuration = '0s';
		secondaryRef.style.transitionDuration = '0s';
		primaryRef.style.transitionDuration = '0s';
	},
	resetAnimation: function resetAnimation(innerRef, secondaryRef, primaryRef) {
		innerRef.style.transitionDuration = '';
		secondaryRef.style.transitionDuration = '';
		primaryRef.style.transitionDuration = '';
	},
	handleDragStart: function handleDragStart() {
		this.panes = this.getPanes();
		var _panes = this.panes,
		    secondaryRef = _panes.secondaryRef,
		    primaryRef = _panes.primaryRef;

		this.secondaryStartRect = secondaryRef.getBoundingClientRect();
		this.disableAnimation(this.storedRefs.inner, secondaryRef, primaryRef);
	},
	handleDrag: function handleDrag(_ref, _ref2) {
		var dX = _ref.dX;
		var event = _ref2.event;
		var _props = this.props,
		    isExpanded = _props.isExpanded,
		    collapseShift = _props.collapseShift,
		    onResizing = _props.onResizing;
		var _panes2 = this.panes,
		    secondaryRef = _panes2.secondaryRef,
		    secondary = _panes2.secondary,
		    right = _panes2.right,
		    primaryRef = _panes2.primaryRef;


		onResizing(this.applyDeltaToSecondaryWidth(dX, isExpanded, this.secondaryStartRect, secondaryRef, secondary, right, this.storedRefs.inner, primaryRef, collapseShift), { props: this.props, event: event });
	},
	handleDragEnd: function handleDragEnd(_ref3, _ref4) {
		var dX = _ref3.dX;
		var event = _ref4.event;
		var _props2 = this.props,
		    isExpanded = _props2.isExpanded,
		    collapseShift = _props2.collapseShift,
		    onResize = _props2.onResize;
		var _panes3 = this.panes,
		    secondaryRef = _panes3.secondaryRef,
		    secondary = _panes3.secondary,
		    right = _panes3.right,
		    primaryRef = _panes3.primaryRef;


		onResize(this.applyDeltaToSecondaryWidth(dX, isExpanded, this.secondaryStartRect, secondaryRef, secondary, right, this.storedRefs.inner, primaryRef, collapseShift), { props: this.props, event: event });

		this.resetAnimation(this.storedRefs.inner, secondaryRef, primaryRef);
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		var isAnimated = nextProps.isAnimated,
		    isExpanded = nextProps.isExpanded,
		    collapseShift = nextProps.collapseShift;

		var _getPanes = this.getPanes(),
		    secondaryRef = _getPanes.secondaryRef;

		if (!isExpanded && ( // check if collapseShift changed or secondary pane collapsed
		this.props.isExpanded || this.props.collapseShift !== collapseShift)) {
			// collapse secondary
			var secondaryRect = secondaryRef.getBoundingClientRect();
			this.collapseSecondary(secondaryRect.width - collapseShift);
		} else if (!this.props.isExpanded && isExpanded) {
			// expand secondary
			this.expandSecondary();
		}

		if (this.state.isAnimated !== isAnimated) {
			this.setState({
				isAnimated: isAnimated
			});
		}
	},
	componentDidMount: function componentDidMount() {
		var _this = this;

		var _props3 = this.props,
		    isAnimated = _props3.isAnimated,
		    isExpanded = _props3.isExpanded,
		    collapseShift = _props3.collapseShift;

		var _getPanes2 = this.getPanes(),
		    secondaryRef = _getPanes2.secondaryRef;

		if (isExpanded) {
			// expand secondary
			this.expandSecondary();
		} else {
			// collapse secondary
			var secondaryRect = secondaryRef.getBoundingClientRect();
			this.collapseSecondary(secondaryRect.width - collapseShift);
		}

		if (this.state.isAnimated !== isAnimated) {
			(0, _defer3.default)(function () {
				_this.setState({
					isAnimated: isAnimated
				});
			});
		}
	},
	storeRef: function storeRef(name) {
		var _this2 = this;

		return function (ref) {
			_this2.storedRefs[name] = ref;
		};
	},
	componentWillMount: function componentWillMount() {
		this.storedRefs = {};
	},
	render: function render() {
		var _this3 = this;

		var _props4 = this.props,
		    children = _props4.children,
		    className = _props4.className,
		    isResizeable = _props4.isResizeable,
		    passThroughs = _objectWithoutProperties(_props4, ['children', 'className', 'isResizeable']);

		var _state = this.state,
		    isAnimated = _state.isAnimated,
		    isExpanded = _state.isExpanded,
		    collapseAmount = _state.collapseAmount;

		var _getPanes3 = this.getPanes(),
		    leftPaneProps = _getPanes3.left,
		    rightPaneProps = _getPanes3.right,
		    secondary = _getPanes3.secondary;

		var dividerProps = (0, _get3.default)((0, _first3.default)((0, _componentTypes.filterTypes)(children, SplitVertical.Divider)), 'props', {});

		var from = void 0,
		    to = void 0;

		if (!isExpanded) {
			from = { slideAmount: 0 };
			to = { slideAmount: collapseAmount };
		} else {
			from = { slideAmount: 0 };
			to = { slideAmount: 0 };
		}

		var isRightSecondary = rightPaneProps === secondary;

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, SplitVertical), {
				className: cx('&', {
					'&-is-expanded': isExpanded,
					'&-is-animated': isAnimated
				}, className),
				style: _extends({
					overflow: 'hidden'
				}, passThroughs.style)
			}),
			_react2.default.createElement(
				_reactMotion.Motion,
				{
					defaultStyle: from,
					style: isAnimated ? (0, _mapValues3.default)(to, function (val) {
						return (0, _reactMotion.spring)(val, _motionSpring.QUICK_SLIDE_MOTION);
					}) : to
				},
				function (tween) {
					return _react2.default.createElement(
						'div',
						{
							className: cx('&-inner'),
							ref: _this3.storeRef('inner'),
							style: {
								display: 'flex',
								transform: 'translateX(' + (isRightSecondary ? 1 : -1) * Math.round(tween.slideAmount) + 'px)'
							}
						},
						_react2.default.createElement(
							'div',
							_extends({}, (0, _componentTypes.omitProps)(leftPaneProps, SplitVertical.LeftPane), {
								className: cx('&-LeftPane', {
									'&-is-secondary': leftPaneProps === secondary
								}, leftPaneProps.className),
								style: _extends({
									flexGrow: isRightSecondary ? 1 : 0,
									flexShrink: isRightSecondary ? 1 : 0,
									flexBasis: (0, _isNil3.default)(leftPaneProps.width) ? leftPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : leftPaneProps.width,
									marginLeft: isRightSecondary ? -Math.round(tween.slideAmount) : null,
									overflow: 'auto'
								}, leftPaneProps.style),
								ref: _this3.storeRef('leftPane')
							}),
							leftPaneProps.children
						),
						isResizeable ? _react2.default.createElement(
							_DragCaptureZone2.default,
							_extends({}, (0, _componentTypes.omitProps)(dividerProps, SplitVertical.Divider, [], false), {
								className: cx('&-Divider', '&-Divider-is-resizeable', dividerProps.className),
								onDragStart: _this3.handleDragStart,
								onDrag: _this3.handleDrag,
								onDragEnd: _this3.handleDragEnd,
								style: _extends({
									width: '6px',
									boxSizing: 'border-box'
								}, dividerProps.style)
							}),
							dividerProps.children || ' '
						) : _react2.default.createElement(
							'div',
							_extends({}, (0, _componentTypes.omitProps)(dividerProps, SplitVertical.Divider), {
								className: cx('&-Divider', dividerProps.className)
							}),
							dividerProps.children || ' '
						),
						_react2.default.createElement(
							'div',
							_extends({}, (0, _componentTypes.omitProps)(rightPaneProps, SplitVertical.RightPane), {
								className: cx('&-RightPane', {
									'&-is-secondary': rightPaneProps === secondary
								}, rightPaneProps.className),
								style: _extends({
									flexGrow: !isRightSecondary ? 1 : 0,
									flexShrink: !isRightSecondary ? 1 : 0,
									flexBasis: (0, _isNil3.default)(rightPaneProps.width) ? rightPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : rightPaneProps.width,
									marginRight: isRightSecondary ? null : -Math.round(tween.slideAmount),
									overflow: 'auto'
								}, rightPaneProps.style),
								ref: _this3.storeRef('rightPane')
							}),
							rightPaneProps.children
						)
					);
				}
			)
		);
	}
});

exports.default = SplitVertical;