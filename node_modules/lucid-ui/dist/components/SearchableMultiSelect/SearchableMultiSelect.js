'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.SearchableMultiSelectDumb = undefined;

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _some2 = require('lodash/some');

var _some3 = _interopRequireDefault(_some2);

var _every2 = require('lodash/every');

var _every3 = _interopRequireDefault(_every2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _escapeRegExp2 = require('lodash/escapeRegExp');

var _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);

var _findIndex2 = require('lodash/findIndex');

var _findIndex3 = _interopRequireDefault(_findIndex2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _partition4 = require('lodash/partition');

var _partition5 = _interopRequireDefault(_partition4);

var _reject2 = require('lodash/reject');

var _reject3 = _interopRequireDefault(_reject2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _stateManagement = require('../../util/state-management');

var _textManipulation = require('../../util/text-manipulation');

var _componentTypes = require('../../util/component-types');

var _SearchField = require('../SearchField/SearchField');

var _DropMenu = require('../DropMenu/DropMenu');

var _LoadingIcon = require('../Icon/LoadingIcon/LoadingIcon');

var _LoadingIcon2 = _interopRequireDefault(_LoadingIcon);

var _CheckboxLabeled = require('../CheckboxLabeled/CheckboxLabeled');

var _CheckboxLabeled2 = _interopRequireDefault(_CheckboxLabeled);

var _Selection = require('../Selection/Selection');

var _Selection2 = _interopRequireDefault(_Selection);

var _SearchableMultiSelect = require('./SearchableMultiSelect.reducers');

var reducers = _interopRequireWildcard(_SearchableMultiSelect);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var any = _propTypes2.default.any,
    arrayOf = _propTypes2.default.arrayOf,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    number = _propTypes2.default.number,
    oneOfType = _propTypes2.default.oneOfType,
    shape = _propTypes2.default.shape,
    string = _propTypes2.default.string,
    oneOf = _propTypes2.default.oneOf,
    node = _propTypes2.default.node;


var cx = _styleHelpers.lucidClassNames.bind('&-SearchableMultiSelect');

var SearchableMultiSelect = (0, _componentTypes.createClass)({
	displayName: 'SearchableMultiSelect',

	statics: {},

	reducers: reducers,

	components: {
		Option: (0, _componentTypes.createClass)({
			displayName: 'SearchableMultiSelect.Option',
			statics: {},
			propName: 'Option',
			propTypes: _extends({
				filterText: string
			}, _DropMenu.DropMenuDumb.Option.propTypes),
			components: {
				Selected: (0, _componentTypes.createClass)({
					displayName: 'SearchableMultiSelect.Option.Selected',
					statics: {},
					propName: 'Selected'
				}),
				Selection: (0, _componentTypes.createClass)({
					displayName: 'SearchableMultiSelect.Option.Selection',
					propName: 'Selection',
					propTypes: _Selection2.default.propTypes
				})
			}
		}),
		SearchField: (0, _componentTypes.createClass)({
			displayName: 'SearchableMultiSelect.SearchField',
			statics: {},
			propName: 'SearchField',
			propTypes: _SearchField.SearchFieldDumb.propTypes
		}),

		OptionGroup: (0, _componentTypes.createClass)({
			displayName: 'SearchableMultiSelect.OptionGroup',
			statics: {},
			propName: 'OptionGroup',
			propTypes: _DropMenu.DropMenuDumb.OptionGroup.propTypes,
			components: {
				Selected: (0, _componentTypes.createClass)({
					displayName: 'SearchableMultiSelect.OptionGroup.Selected',
					statics: {},
					propName: 'Selected'
				})
			}
		}),

		SelectionLabel: (0, _componentTypes.createClass)({
			displayName: 'SearchableMultiSelect.SelectionLabel',
			statics: {},
			propName: 'SelectionLabel'
		})
	},

	propTypes: {
		children: node,

		className: string,

		isDisabled: bool,

		isLoading: bool,

		maxMenuHeight: oneOfType([number, string]),

		onSearch: func,

		onSelect: func,

		onRemoveAll: func,

		optionFilter: func,

		searchText: string,

		selectedIndices: arrayOf(number),

		DropMenu: shape(_DropMenu.DropMenuDumb.propTypes),

		Option: any,

		responsiveMode: oneOf(['small', 'medium', 'large']),

		hasRemoveAll: bool,

		hasSelections: bool,

		hasSelectAll: bool
	},

	getInitialState: function getInitialState() {
		return {
			optionGroups: [],
			flattenedOptionsData: [],
			ungroupedOptionData: [],
			optionGroupDataLookup: {}
		};
	},
	getDefaultProps: function getDefaultProps() {
		return {
			isDisabled: false,
			isLoading: false,
			onRemoveAll: _noop3.default,
			optionFilter: _textManipulation.propsSearch,
			searchText: '',
			selectedIndices: [],
			DropMenu: _DropMenu.DropMenuDumb.getDefaultProps(),
			responsiveMode: 'large',
			hasRemoveAll: true,
			hasSelections: true,
			hasSelectAll: false
		};
	},
	handleDropMenuSelect: function handleDropMenuSelect(optionIndex, _ref) {
		var event = _ref.event,
		    props = _ref.props;
		var onSelect = this.props.onSelect;


		event.preventDefault();

		if (optionIndex === 0) {
			return this.handleSelectAll(event);
		}
		// this index is decremented to account for the "Select All" Option
		return onSelect(optionIndex - 1, { event: event, props: props });
	},
	handleSelectAll: function handleSelectAll(event) {
		// This is needed otherwise clicking the checkbox will double fire this
		// event _and_ the `handleDropMenuSelect` handler
		var _props = this.props,
		    selectedIndices = _props.selectedIndices,
		    onSelect = _props.onSelect,
		    flattenedOptionsData = this.state.flattenedOptionsData;


		event.preventDefault();

		var visibleOptions = (0, _reject3.default)(flattenedOptionsData, 'optionProps.isHidden');

		var _partition2 = (0, _partition5.default)(visibleOptions, function (_ref2) {
			var optionIndex = _ref2.optionIndex;
			return (0, _includes3.default)(selectedIndices, optionIndex);
		}),
		    _partition3 = _slicedToArray(_partition2, 2),
		    selected = _partition3[0],
		    unselected = _partition3[1];

		var indices = (0, _isEmpty3.default)(unselected) ? (0, _map3.default)(selected, 'optionIndex') : (0, _map3.default)(unselected, 'optionIndex');

		return onSelect(indices);
	},
	handleSelectionRemove: function handleSelectionRemove(_ref3) {
		var event = _ref3.event,
		    props = _ref3.props,
		    optionIndex = _ref3.props.callbackId;

		// We don't want to send the consumer the selection's props so we have to
		// lookup the option they clicked and send its props along
		var selectedOptionProps = (0, _get3.default)((0, _componentTypes.findTypes)(this.props, SearchableMultiSelect.Option), '[' + optionIndex + '].props');

		return this.props.onSelect(optionIndex, {
			event: event,
			props: selectedOptionProps
		});
	},
	handleRemoveAll: function handleRemoveAll(_ref4) {
		var event = _ref4.event;

		this.props.onRemoveAll({ event: event, props: this.props });
	},
	handleSearch: function handleSearch(searchText, _ref5) {
		var event = _ref5.event;
		var props = this.props,
		    _props2 = this.props,
		    onSearch = _props2.onSearch,
		    optionFilter = _props2.optionFilter,
		    onExpand = _props2.DropMenu.onExpand;


		var options = (0, _map3.default)((0, _componentTypes.findTypes)(props, SearchableMultiSelect.Option), 'props');
		var firstVisibleIndex = (0, _findIndex3.default)(options, function (option) {
			return optionFilter(searchText, option);
		});
		var firstVisibleProps = options[firstVisibleIndex];

		// Just an extra call to make sure the search results show up when a user
		// is typing
		onExpand();

		return onSearch(searchText, firstVisibleIndex, {
			event: event,
			props: firstVisibleProps
		});
	},
	componentWillMount: function componentWillMount() {
		var _this = this;

		// preprocess the options data before rendering
		this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(this.props, SearchableMultiSelect, function (props) {
			return !_this.props.optionFilter(_this.props.searchText, props);
		}));
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		var _this2 = this;

		// only preprocess options data when it changes (via new props) - better performance than doing this each render
		this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(nextProps, SearchableMultiSelect, function (props) {
			return !_this2.props.optionFilter(nextProps.searchText, props);
		}));
	},
	renderUnderlinedChildren: function renderUnderlinedChildren(childText, searchText) {
		var _partitionText = (0, _textManipulation.partitionText)(childText, new RegExp((0, _escapeRegExp3.default)(searchText), 'i'), searchText.length),
		    _partitionText2 = _slicedToArray(_partitionText, 3),
		    pre = _partitionText2[0],
		    match = _partitionText2[1],
		    post = _partitionText2[2];

		return [pre && _react2.default.createElement(
			'span',
			{ key: 'pre', className: cx('&-Option-underline-pre') },
			pre
		), match && _react2.default.createElement(
			'span',
			{ key: 'match', className: cx('&-Option-underline-match') },
			match
		), post && _react2.default.createElement(
			'span',
			{ key: 'post', className: cx('&-Option-underline-post') },
			post
		)];
	},
	renderOption: function renderOption(_ref6) {
		var optionProps = _ref6.optionProps,
		    optionIndex = _ref6.optionIndex;
		var _props3 = this.props,
		    searchText = _props3.searchText,
		    selectedIndices = _props3.selectedIndices,
		    isLoading = _props3.isLoading,
		    optionFilter = _props3.optionFilter;


		return _react2.default.createElement(
			_DropMenu.DropMenuDumb.Option,
			_extends({
				key: 'SearchableMultiSelectOption' + optionIndex
			}, (0, _omit3.default)(optionProps, ['children', 'Selected', 'filterText']), {
				isHidden: !optionFilter(searchText, optionProps),
				isDisabled: optionProps.isDisabled || isLoading
			}),
			_react2.default.createElement(
				_CheckboxLabeled2.default,
				{
					className: cx('&-CheckboxLabeled'),
					callbackId: optionIndex,
					isSelected: (0, _includes3.default)(selectedIndices, optionIndex)
				},
				_react2.default.createElement(
					_CheckboxLabeled2.default.Label,
					null,
					(0, _isString3.default)(optionProps.children) ? this.renderUnderlinedChildren(optionProps.children, searchText) : (0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children, { searchText: searchText }) : optionProps.children
				)
			)
		);
	},
	renderOptions: function renderOptions() {
		var _this3 = this;

		var _props4 = this.props,
		    searchText = _props4.searchText,
		    isLoading = _props4.isLoading,
		    hasSelectAll = _props4.hasSelectAll,
		    selectedIndices = _props4.selectedIndices;
		var _state = this.state,
		    optionGroups = _state.optionGroups,
		    optionGroupDataLookup = _state.optionGroupDataLookup,
		    ungroupedOptionData = _state.ungroupedOptionData,
		    flattenedOptionsData = _state.flattenedOptionsData;


		var visibleOptions = (0, _reject3.default)(flattenedOptionsData, 'optionProps.isHidden');

		var isAllOptionsHidden = (0, _isEmpty3.default)(visibleOptions);

		var isEveryVisibleOptionSelected = (0, _every3.default)(visibleOptions, function (_ref7) {
			var optionIndex = _ref7.optionIndex;
			return (0, _includes3.default)(selectedIndices, optionIndex);
		});

		var isAnyVisibleOptionSelected = (0, _some3.default)(visibleOptions, function (_ref8) {
			var optionIndex = _ref8.optionIndex;
			return (0, _includes3.default)(selectedIndices, optionIndex);
		});

		// for each option group passed in, render a DropMenu.OptionGroup, any label will be included in it's children, render each option inside the group
		var dropMenuOptions = [_react2.default.createElement(
			_DropMenu.DropMenuDumb.FixedOption,
			{
				className: cx('&-Option-select-all'),
				key: 'SearchableMultiSelectOption-select-all',
				isHidden: !hasSelectAll,
				isDisabled: isLoading
			},
			_react2.default.createElement(_CheckboxLabeled2.default, {
				className: cx('&-CheckboxLabeled'),
				isSelected: isEveryVisibleOptionSelected,
				isIndeterminate: !isEveryVisibleOptionSelected && isAnyVisibleOptionSelected,
				Label: 'Select All'
			})
		)].concat((0, _map3.default)(optionGroups, function (optionGroupProps, optionGroupIndex) {
			return _react2.default.createElement(
				_DropMenu.DropMenuDumb.OptionGroup,
				_extends({
					key: 'SearchableMultiSelectOptionGroup' + optionGroupIndex
				}, (0, _omit3.default)(optionGroupProps, 'children', 'Selected')),
				optionGroupProps.children,
				(0, _map3.default)(optionGroupDataLookup[optionGroupIndex], _this3.renderOption)
			);
		}).concat(
		// then render all the ungrouped options at the end
		(0, _map3.default)(ungroupedOptionData, this.renderOption)));

		if (!isAllOptionsHidden || (0, _isEmpty3.default)(searchText)) {
			return dropMenuOptions;
		}

		if (!isLoading) {
			return _react2.default.createElement(
				_DropMenu.DropMenuDumb.Option,
				{ isDisabled: true },
				_react2.default.createElement(
					'span',
					{ className: cx('&-noresults') },
					'No results match "',
					searchText,
					'"'
				)
			);
		}

		return null;
	},
	render: function render() {
		var _this4 = this;

		var props = this.props,
		    _props5 = this.props,
		    className = _props5.className,
		    isLoading = _props5.isLoading,
		    isDisabled = _props5.isDisabled,
		    maxMenuHeight = _props5.maxMenuHeight,
		    selectedIndices = _props5.selectedIndices,
		    dropMenuProps = _props5.DropMenu,
		    optionContainerStyle = _props5.DropMenu.optionContainerStyle,
		    responsiveMode = _props5.responsiveMode,
		    searchText = _props5.searchText,
		    hasRemoveAll = _props5.hasRemoveAll,
		    hasSelections = _props5.hasSelections,
		    passThroughs = _objectWithoutProperties(_props5, ['className', 'isLoading', 'isDisabled', 'maxMenuHeight', 'selectedIndices', 'DropMenu', 'DropMenu', 'responsiveMode', 'searchText', 'hasRemoveAll', 'hasSelections']);

		var _state2 = this.state,
		    optionGroupDataLookup = _state2.optionGroupDataLookup,
		    optionGroups = _state2.optionGroups,
		    ungroupedOptionData = _state2.ungroupedOptionData;


		var searchFieldProps = (0, _get3.default)((0, _componentTypes.getFirst)(props, SearchableMultiSelect.SearchField), 'props', {});
		var selectionLabel = (0, _componentTypes.getFirst)(props, SearchableMultiSelect.SelectionLabel) || _react2.default.createElement(
			SearchableMultiSelect.SelectionLabel,
			null,
			'Selected'
		);
		var isSmall = responsiveMode === 'small';

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, SearchableMultiSelect), {
				className: cx('&', className)
			}),
			_react2.default.createElement(
				_DropMenu.DropMenuDumb,
				_extends({}, dropMenuProps, {
					selectedIndices: null,
					className: cx('&-DropMenu', {
						'&-DropMenu-is-small': isSmall
					}, dropMenuProps.className),
					optionContainerStyle: (0, _assign3.default)({}, optionContainerStyle, !(0, _isNil3.default)(maxMenuHeight) ? { maxHeight: maxMenuHeight } : null),
					isDisabled: isDisabled,
					onSelect: this.handleDropMenuSelect,
					ContextMenu: {
						alignmentOffset: -13,
						directonOffset: -1,
						minWidthOffset: -28
					}
				}),
				_react2.default.createElement(
					_DropMenu.DropMenuDumb.Control,
					null,
					_react2.default.createElement(_SearchField.SearchFieldDumb, _extends({}, searchFieldProps, {
						isDisabled: isDisabled,
						className: cx('&-search', {
							'&-search-is-small': isSmall
						}, searchFieldProps.className),
						value: searchText,
						onChange: this.handleSearch
					}))
				),
				isLoading ? _react2.default.createElement(
					_DropMenu.DropMenuDumb.Option,
					{
						key: 'SearchableMultiSelectLoading',
						className: cx('&-loading'),
						isDisabled: true
					},
					_react2.default.createElement(_LoadingIcon2.default, null)
				) : null,
				this.renderOptions()
			),
			hasSelections && !(0, _isEmpty3.default)(selectedIndices) ? _react2.default.createElement(
				_Selection2.default,
				{
					className: cx('&-Selection-section'),
					isBold: true,
					hasBackground: true,
					kind: 'container',
					onRemove: this.handleRemoveAll,
					responsiveMode: responsiveMode,
					isRemovable: hasRemoveAll
				},
				_react2.default.createElement(
					_Selection2.default.Label,
					null,
					selectionLabel.props.children
				),
				(0, _map3.default)(optionGroupDataLookup, function (groupedOptionsData, optionGroupIndex) {
					var selectedGroupedOptions = (0, _filter3.default)(groupedOptionsData, function (_ref9) {
						var optionIndex = _ref9.optionIndex;
						return (0, _includes3.default)(selectedIndices, optionIndex);
					});
					if (!(0, _isEmpty3.default)(selectedGroupedOptions)) {
						var selectedOptionGroupChildren = (0, _get3.default)((0, _componentTypes.getFirst)(optionGroups[optionGroupIndex], SearchableMultiSelect.OptionGroup.Selected), 'props.children');
						return _react2.default.createElement(
							_Selection2.default,
							{
								className: cx('&-Selection-group'),
								key: 'optionGroup-' + optionGroupIndex,
								responsiveMode: responsiveMode,
								isRemovable: false,
								isBold: true,
								kind: 'container'
							},
							_react2.default.createElement(
								_Selection2.default.Label,
								null,
								!(0, _isNil3.default)(selectedOptionGroupChildren) ? selectedOptionGroupChildren : (0, _first3.default)((0, _componentTypes.rejectTypes)(optionGroups[optionGroupIndex].children, SearchableMultiSelect.Option))
							),
							(0, _map3.default)(selectedGroupedOptions, function (_ref10) {
								var optionIndex = _ref10.optionIndex,
								    optionProps = _ref10.optionProps;

								var selectionProps = (0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selection), 'props');
								return _react2.default.createElement(
									_Selection2.default,
									_extends({
										key: optionIndex
									}, selectionProps, {
										callbackId: optionIndex,
										responsiveMode: responsiveMode,
										onRemove: _this4.handleSelectionRemove
									}),
									_react2.default.createElement(
										_Selection2.default.Label,
										null,
										(0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selected), 'props.children') || ((0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children) : optionProps.children)
									)
								);
							})
						);
					}
					return null;
				}),
				(0, _map3.default)(selectedIndices, function (selectedIndex) {
					var selectedUngroupedOptionData = (0, _find3.default)(ungroupedOptionData, {
						optionIndex: selectedIndex
					});

					if (selectedUngroupedOptionData) {
						var optionProps = selectedUngroupedOptionData.optionProps;

						var selectionProps = (0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selection), 'props');
						return _react2.default.createElement(
							_Selection2.default,
							_extends({
								key: selectedIndex
							}, selectionProps, {
								callbackId: selectedIndex,
								responsiveMode: responsiveMode,
								onRemove: _this4.handleSelectionRemove
							}),
							_react2.default.createElement(
								_Selection2.default.Label,
								null,
								(0, _get3.default)((0, _componentTypes.getFirst)(optionProps, SearchableMultiSelect.Option.Selected), 'props.children') || ((0, _isFunction3.default)(optionProps.children) ? _react2.default.createElement(optionProps.children) : optionProps.children)
							)
						);
					}
					return null;
				})
			) : null
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(SearchableMultiSelect);
exports.SearchableMultiSelectDumb = SearchableMultiSelect;