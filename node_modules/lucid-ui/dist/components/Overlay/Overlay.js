'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Portal = require('../Portal/Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _CSSTransitionGroup = require('react-transition-group/CSSTransitionGroup');

var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Overlay');

var string = _propTypes2.default.string,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node;


var Overlay = (0, _componentTypes.createClass)({
	displayName: 'Overlay',

	statics: {},

	propTypes: {
		className: string,

		children: node,

		isShown: bool,

		isAnimated: bool,

		isModal: bool,

		portalId: string,

		onEscape: func,

		onBackgroundClick: func
	},

	getDefaultProps: function getDefaultProps() {
		return {
			isShown: false,
			isModal: true,
			onEscape: _noop3.default,
			onBackgroundClick: _noop3.default,
			isAnimated: true
		};
	},
	getInitialState: function getInitialState() {
		return {
			// This must be in state because getDefaultProps only runs once per
			// component import which causes collisions
			portalId: this.props.portalId || (0, _uniqueId3.default)('Overlay-Portal-')
		};
	},
	componentDidMount: function componentDidMount() {
		if (window && window.document) {
			window.document.addEventListener('keydown', this.handleDocumentKeyDown);
		}
	},
	componentWillUnmount: function componentWillUnmount() {
		if (window && window.document) {
			window.document.removeEventListener('keydown', this.handleDocumentKeyDown);
		}
	},
	handleDocumentKeyDown: function handleDocumentKeyDown(event) {
		// If the user hits the "escape" key, then fire an `onEscape`
		// TODO: use key helpers
		if (event.keyCode === 27) {
			this.props.onEscape({ event: event, props: this.props });
		}
	},
	handleDivRef: function handleDivRef(divDOMNode) {
		// Store the dom node so we can check if it's clicked on later
		this._divDOMNode = _reactDom2.default.findDOMNode(divDOMNode);
	},
	handleBackgroundClick: function handleBackgroundClick(event) {
		// Use the reference we previously stored from the `ref` to check what
		// element was clicked on.
		if (this._divDOMNode && event.target === this._divDOMNode) {
			this.props.onBackgroundClick({ event: event, props: this.props });
		}
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    isShown = _props.isShown,
		    isModal = _props.isModal,
		    isAnimated = _props.isAnimated,
		    children = _props.children,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'isShown', 'isModal', 'isAnimated', 'children']);

		var portalId = this.state.portalId;


		var overlayElement = isShown ? _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Overlay), {
				className: cx(className, '&', {
					'&-is-not-modal': !isModal,
					'&-is-animated': isAnimated
				}),
				onClick: this.handleBackgroundClick,
				ref: this.handleDivRef
			}),
			children
		) : null;

		return _react2.default.createElement(
			_Portal2.default,
			{ portalId: portalId },
			isAnimated ? _react2.default.createElement(
				_CSSTransitionGroup2.default,
				{
					transitionName: cx('&'),
					transitionEnterTimeout: 300,
					transitionLeaveTimeout: 300
				},
				overlayElement
			) : overlayElement
		);
	}
});

exports.default = Overlay;