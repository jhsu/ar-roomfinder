'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.SingleSelectDumb = undefined;

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _SingleSelect = require('./SingleSelect.reducers');

var reducers = _interopRequireWildcard(_SingleSelect);

var _DropMenu = require('../DropMenu/DropMenu');

var _CaretIcon = require('../Icon/CaretIcon/CaretIcon');

var _CaretIcon2 = _interopRequireDefault(_CaretIcon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cx = _styleHelpers.lucidClassNames.bind('&-SingleSelect');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    object = _propTypes2.default.object,
    shape = _propTypes2.default.shape,
    string = _propTypes2.default.string,
    oneOfType = _propTypes2.default.oneOfType;


var SingleSelect = (0, _componentTypes.createClass)({
	displayName: 'SingleSelect',

	statics: {},

	reducers: reducers,

	components: {
		Placeholder: (0, _componentTypes.createClass)({
			displayName: 'SingleSelect.Placeholder',
			statics: {},
			propName: 'Placeholder'
		}),
		Option: (0, _componentTypes.createClass)({
			displayName: 'SingleSelect.Option',
			statics: {},
			propName: 'Option',
			propTypes: _extends({
				Selected: any
			}, _DropMenu.DropMenuDumb.Option.propTypes),
			components: {
				Selected: (0, _componentTypes.createClass)({
					displayName: 'SingleSelect.Option.Selected',
					statics: {},
					propName: 'Selected'
				})
			}
		}),
		OptionGroup: (0, _componentTypes.createClass)({
			displayName: 'SingleSelect.OptionGroup',
			statics: {},
			propName: 'OptionGroup',
			propTypes: _DropMenu.DropMenuDumb.OptionGroup.propTypes
		})
	},

	propTypes: {
		children: node,

		className: string,

		style: object,

		isSelectionHighlighted: bool,

		hasReset: bool,

		isDisabled: bool,

		selectedIndex: number,

		maxMenuHeight: oneOfType([number, string]),

		DropMenu: shape(_DropMenu.DropMenuDumb.propTypes),

		onSelect: func,

		Placeholder: any,

		Option: any,

		OptionGroup: any
	},

	getDefaultProps: function getDefaultProps() {
		return {
			hasReset: true,
			isSelectionHighlighted: true,
			isDisabled: false,
			selectedIndex: null,
			DropMenu: _DropMenu.DropMenuDumb.getDefaultProps()
		};
	},
	getInitialState: function getInitialState() {
		return {
			optionGroups: [],
			flattenedOptionsData: [],
			ungroupedOptionData: [],
			optionGroupDataLookup: {}
		};
	},
	componentWillMount: function componentWillMount() {
		// preprocess the options data before rendering
		this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(this.props, SingleSelect));
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		// only preprocess options data when it changes (via new props) - better performance than doing this each render
		this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(nextProps, SingleSelect));
	},
	render: function render() {
		var _props = this.props,
		    style = _props.style,
		    className = _props.className,
		    hasReset = _props.hasReset,
		    isDisabled = _props.isDisabled,
		    isSelectionHighlighted = _props.isSelectionHighlighted,
		    selectedIndex = _props.selectedIndex,
		    maxMenuHeight = _props.maxMenuHeight,
		    onSelect = _props.onSelect,
		    dropMenuProps = _props.DropMenu;
		var direction = dropMenuProps.direction,
		    isExpanded = dropMenuProps.isExpanded,
		    flyOutStyle = dropMenuProps.flyOutStyle;
		var _state = this.state,
		    optionGroups = _state.optionGroups,
		    optionGroupDataLookup = _state.optionGroupDataLookup,
		    ungroupedOptionData = _state.ungroupedOptionData,
		    flattenedOptionsData = _state.flattenedOptionsData;


		var placeholderProps = (0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, SingleSelect.Placeholder), 'props'));
		var placeholder = (0, _get3.default)(placeholderProps, 'children', 'Select');
		var isItemSelected = (0, _isNumber3.default)(selectedIndex);

		return _react2.default.createElement(
			_DropMenu.DropMenuDumb,
			_extends({}, dropMenuProps, {
				isDisabled: isDisabled,
				selectedIndices: isItemSelected ? [selectedIndex] : [],
				className: cx('&', className),
				onSelect: onSelect,
				style: style,
				flyOutStyle: (0, _assign3.default)({}, flyOutStyle, !(0, _isNil3.default)(maxMenuHeight) ? { maxHeight: maxMenuHeight } : null)
			}),
			_react2.default.createElement(
				_DropMenu.DropMenuDumb.Control,
				null,
				_react2.default.createElement(
					'div',
					{
						tabIndex: 0,
						className: cx('&-Control', {
							'&-Control-is-highlighted': !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted,
							'&-Control-is-selected': !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted,
							'&-Control-is-expanded': isExpanded,
							'&-Control-is-disabled': isDisabled
						})
					},
					_react2.default.createElement(
						'span',
						_extends({}, !isItemSelected ? placeholderProps : null, {
							className: cx('&-Control-content', !isItemSelected ? (0, _get3.default)(placeholderProps, 'className') : null)
						}),
						isItemSelected ? (0, _get3.default)((0, _componentTypes.getFirst)(flattenedOptionsData[selectedIndex].optionProps, SingleSelect.Option.Selected), 'props.children') || flattenedOptionsData[selectedIndex].optionProps.children : placeholder
					),
					_react2.default.createElement(_CaretIcon2.default, { direction: isExpanded ? direction : 'down', size: 8 })
				)
			),
			hasReset && isItemSelected ? _react2.default.createElement(
				_DropMenu.DropMenuDumb.NullOption,
				placeholderProps,
				placeholder
			) : null,
			// for each option group passed in, render a DropMenu.OptionGroup, any label will be included in it's children, render each option inside the group
			(0, _map3.default)(optionGroups, function (optionGroupProps, optionGroupIndex) {
				return _react2.default.createElement(
					_DropMenu.DropMenuDumb.OptionGroup,
					_extends({
						key: 'SingleSelectOptionGroup' + optionGroupIndex
					}, optionGroupProps),
					optionGroupProps.children,
					(0, _map3.default)((0, _get3.default)(optionGroupDataLookup, optionGroupIndex), function (_ref) {
						var optionProps = _ref.optionProps,
						    optionIndex = _ref.optionIndex;
						return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, _extends({
							key: 'SingleSelectOption' + optionIndex
						}, (0, _omit3.default)(optionProps, 'Selected')));
					})
				);
			}).concat(
			// then render all the ungrouped options at the end
			(0, _map3.default)(ungroupedOptionData, function (_ref2) {
				var optionProps = _ref2.optionProps,
				    optionIndex = _ref2.optionIndex;
				return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, _extends({
					key: 'SingleSelectOption' + optionIndex
				}, (0, _omit3.default)(optionProps, 'Selected')));
			}))
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(SingleSelect);
exports.SingleSelectDumb = SingleSelect;