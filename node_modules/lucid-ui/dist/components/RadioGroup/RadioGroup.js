'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.RadioGroupDumb = undefined;

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _findLastIndex2 = require('lodash/findLastIndex');

var _findLastIndex3 = _interopRequireDefault(_findLastIndex2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('react-peek/prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _RadioGroup = require('./RadioGroup.reducers');

var _RadioGroup2 = _interopRequireDefault(_RadioGroup);

var _stateManagement = require('../../util/state-management');

var _RadioButtonLabeled = require('../RadioButtonLabeled/RadioButtonLabeled');

var _RadioButtonLabeled2 = _interopRequireDefault(_RadioButtonLabeled);

var _RadioButton = require('../RadioButton/RadioButton');

var _RadioButton2 = _interopRequireDefault(_RadioButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-RadioGroup');

var func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    string = _propTypes2.default.string,
    bool = _propTypes2.default.bool;


var RadioGroup = (0, _componentTypes.createClass)({
	displayName: 'RadioGroup',

	statics: {},

	components: {
		RadioButton: _RadioButton2.default,

		Label: (0, _componentTypes.createClass)({
			displayName: 'RadioGroup.Label',
			statics: {},
			propTypes: {
				children: node
			}
		})
	},

	reducers: _RadioGroup2.default,

	propTypes: {
		children: node,

		className: string,

		name: string,

		onSelect: func,

		selectedIndex: number,

		isDisabled: bool
	},

	getDefaultProps: function getDefaultProps() {
		return {
			name: (0, _uniqueId3.default)(cx('&') + '-'),
			onSelect: _noop3.default,
			selectedIndex: 0,
			isDisabled: false
		};
	},
	render: function render() {
		var _this = this;

		var _props = this.props,
		    children = _props.children,
		    className = _props.className,
		    name = _props.name,
		    selectedIndex = _props.selectedIndex,
		    isDisabled = _props.isDisabled,
		    passThroughs = _objectWithoutProperties(_props, ['children', 'className', 'name', 'selectedIndex', 'isDisabled']);

		var radioButtonChildProps = (0, _map3.default)((0, _componentTypes.findTypes)(this.props, RadioGroup.RadioButton), 'props');

		var selectedIndexFromChildren = (0, _findLastIndex3.default)(radioButtonChildProps, {
			isSelected: true
		});

		// If there are any `RadioGroup.RadioButton` children with `isSelected`
		// equal to true, then the index of the last one should override the
		// value of the `selectedIndex` prop.
		var actualSelectedIndex = selectedIndexFromChildren !== -1 ? selectedIndexFromChildren : selectedIndex;

		return _react2.default.createElement(
			'span',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, RadioGroup), {
				className: cx('&', className)
			}),
			(0, _map3.default)(radioButtonChildProps, function (radioButtonChildProp, index) {
				return _react2.default.createElement(_RadioButtonLabeled2.default, _extends({}, radioButtonChildProp, {
					isDisabled: isDisabled || radioButtonChildProp.isDisabled,
					isSelected: actualSelectedIndex === index,
					key: index,
					callbackId: index,
					name: name,
					onSelect: _this.handleSelected,
					Label: (0, _get3.default)((0, _componentTypes.getFirst)(radioButtonChildProp, RadioGroup.Label), 'props', null)
				}));
			}),
			(0, _componentTypes.rejectTypes)(children, RadioGroup.RadioButton)
		);
	},
	handleSelected: function handleSelected(isSelected, _ref) {
		var event = _ref.event,
		    childProps = _ref.props;
		var callbackId = childProps.callbackId;

		var clickedRadioButtonProps = (0, _map3.default)((0, _componentTypes.findTypes)(this.props, RadioGroup.RadioButton), 'props')[callbackId];

		// If the `RadioGroup.RadioButton` child has an `onSelect` prop that is
		// a function, call that prior to calling the group's `onSelect` prop.
		if ((0, _isFunction3.default)(clickedRadioButtonProps.onSelect)) {
			clickedRadioButtonProps.onSelect(isSelected, {
				event: event,
				props: childProps
			});
		}

		this.props.onSelect(callbackId, { event: event, props: childProps });
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(RadioGroup);
exports.RadioGroupDumb = RadioGroup;